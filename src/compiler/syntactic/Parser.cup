package compiler.syntactic;

import java.io.InputStream;
import java.io.InputStreamReader;
import compiler.ast.*;

parser code
{:
public void report_error(String msg, Object info)
{
	StringBuffer m = new StringBuffer("\tParsing Error!");
	if(info instanceof java_cup.runtime.Symbol)
	{
		java_cup.runtime.Symbol s= (java_cup.runtime.Symbol)info;
		if(s.left>=0)
		{
			m.append(" in line " + (s.left +1 ));
			if (s.right >= 0)
			{
				m.append(", column " + (s.right + 1));
				if(s.value!=null)
					m.append(": "+s.value);
			}
		}
	}
	m.append(" : " + msg);
	System.err.println(m);
	System.exit(1);
}

public Parser(InputStream in)
{
	this(new Lexer(new InputStreamReader(in))); 
}

public Parser(Reader in)
{
	this(new Lexer(in));
}
:}

/* Terminal */
terminal VOID, CHAR, INT, STRUCT, UNION, IF, ELSE, WHILE, FOR, CONTINUE, BREAK, RETURN, SIZEOF;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LMPAREN, RMPAREN;
terminal SEMI, COMMA, PLUS, MINUS, TIMES, DIVIDE, MODULE;
terminal INC, DEC;
terminal MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, ADD_ASSIGN, SUB_ASSIGN, SHL_ASSIGN, SHR_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN;
terminal NOT, OR, AND, DOT, PTR;
terminal EQ, NE, LT, LE, GT, GE, ASSIGN;
terminal BIT_OR, BIT_XOR, BIT_AND, BIT_NOT, SHL, SHR;
terminal String	ID;
terminal Integer NUM;
terminal String	STRINGCONTENT;
terminal Character CHARCONTENT;

/* Non Terminal */
non terminal Program program;
non terminal ProgramComp prog_comp;

non terminal StarList star_list;
non terminal PlainDeclarator plain_declarator;
non terminal Declarator declarator;
non terminal FuncDeclarator func_declarator;
non terminal VarDeclarator var_declarator;
non terminal InitDeclarator init_declarator;

non terminal PlainDeclaration plain_declaration;
non terminal Declaration declaration;
non terminal NonInitDeclaration non_init_declaration;

non terminal DeclaratorList declarator_list;
non terminal InitDeclaratorList init_declarator_list;
non terminal DeclarationList declaration_list;
non terminal NonInitDeclarationList non_init_declaration_list;

non terminal Initializer initializer;
non terminal InitializerList initializer_list;

non terminal TypeSpecifier type_specifier;
non terminal ParameterList parameter_list;
non terminal FuncDef func_def;

/* Statements */
non terminal Stmt stmt;
non terminal StmtList stmt_list;

non terminal ExpressionStmt expression_stmt;
non terminal CompoundStmt compound_stmt;
non terminal SelectionStmt selection_stmt;
non terminal JumpStmt jump_stmt;
non terminal IterationStmt iteration_stmt;

/* Expressions */
non terminal Expression expression;
non terminal Expr assignment_expression;
non terminal Expr logical_and_expression;
non terminal Expr logical_or_expression;
non terminal Expr inclusive_or_expression;
non terminal Expr exclusive_or_expression;
non terminal Expr and_expression;
non terminal Expr equality_expression;
non terminal Expr relational_expression;
non terminal Expr shift_expression;
non terminal Expr additive_expression;
non terminal Expr multiplicative_expression;
non terminal Expr cast_expression;
non terminal Expr unary_expression;
non terminal Expr postfix_expression;
non terminal Expr primary_expression;
non terminal Expr constant_expression;

non terminal TypeName type_name;
non terminal ArgumentList argument_list;

precedence nonassoc ELSE;

start with program;

//the expressions in priority hierarchy
primary_expression ::= ID:id {: RESULT = new PrimaryExpr(PrimaryExpr.ElemType.ID, id); :}
					 | STRINGCONTENT:str {: RESULT = new PrimaryExpr(PrimaryExpr.ElemType.STRING, str); :}
					 | LPAREN expression:e RPAREN {: RESULT = e; :}
					 | NUM:num {: RESULT = new PrimaryExpr(PrimaryExpr.ElemType.INT, num); :}
					 | CHARCONTENT:ch {: RESULT = new PrimaryExpr(PrimaryExpr.ElemType.CHAR, ch); :};

postfix_expression ::= primary_expression:pe {: RESULT = pe; :}
					 | postfix_expression:pe LMPAREN expression:index RMPAREN {: RESULT = new PostfixExpr(pe, PostfixExpr.Operator.MPAREN, index); :}
					 | postfix_expression:pe LPAREN RPAREN {: RESULT = new PostfixExpr(pe, PostfixExpr.Operator.PAREN, null); :}
					 | postfix_expression:pe LPAREN argument_list:arg RPAREN {: RESULT = new PostfixExpr(pe, PostfixExpr.Operator.PAREN, arg); :}
					 | postfix_expression:pe DOT ID:id {: RESULT = new PostfixExpr(pe, PostfixExpr.Operator.DOT, id); :}
					 | postfix_expression:pe PTR ID:id {: RESULT = new PostfixExpr(pe, PostfixExpr.Operator.PTR, id); :}
					 | postfix_expression:pe INC {: RESULT = new PostfixExpr(pe, PostfixExpr.Operator.INC, null); :}
					 | postfix_expression:pe DEC {: RESULT = new PostfixExpr(pe, PostfixExpr.Operator.DEC, null); :};

unary_expression ::= postfix_expression:pe {: RESULT = pe; :}
                   | INC unary_expression:ue {: RESULT = new UnaryExpr(UnaryExpr.Operator.INC, ue, null); :}
                   | DEC unary_expression:ue {: RESULT = new UnaryExpr(UnaryExpr.Operator.DEC, ue, null); :}
                   | BIT_AND cast_expression:ce {: RESULT = new UnaryExpr(UnaryExpr.Operator.BIT_AND, ce, null); :}
                   | TIMES cast_expression:ce {: RESULT = new UnaryExpr(UnaryExpr.Operator.STAR, ce, null); :}
                   | PLUS cast_expression:ce {: RESULT = new UnaryExpr(UnaryExpr.Operator.POSITIVE, ce, null); :}
                   | MINUS cast_expression:ce {: RESULT = new UnaryExpr(UnaryExpr.Operator.NEGATIVE, ce, null); :}
                   | BIT_NOT cast_expression:ce {: RESULT = new UnaryExpr(UnaryExpr.Operator.BIT_NOT, ce, null); :}
                   | NOT cast_expression:ce {: RESULT = new UnaryExpr(UnaryExpr.Operator.NOT, ce, null); :}
                   | SIZEOF unary_expression:ue {: RESULT = new UnaryExpr(UnaryExpr.Operator.SIZEOF, ue, null); :}
                   | SIZEOF LPAREN type_name:t RPAREN {: RESULT = new UnaryExpr(UnaryExpr.Operator.SIZEOF, null, t); :};

cast_expression	::= unary_expression:ue {: RESULT = ue; :}
				  | LPAREN type_name:t RPAREN cast_expression:ce {: RESULT = new CastExpr(t, ce); :};

multiplicative_expression ::= cast_expression:ce {: RESULT = ce; :}
							| multiplicative_expression:me TIMES cast_expression:ce {: RESULT = new BinaryExpr(BinaryExpr.Operator.TIMES, me, ce); :}
						    | multiplicative_expression:me DIVIDE cast_expression:ce {: RESULT = new BinaryExpr(BinaryExpr.Operator.DIVIDE, me, ce); :}
						    | multiplicative_expression:me MODULE cast_expression:ce {: RESULT = new BinaryExpr(BinaryExpr.Operator.MODULE, me, ce); :};

additive_expression	::= multiplicative_expression:me {: RESULT = me; :}
                      | additive_expression:ae PLUS multiplicative_expression:me {: RESULT = new BinaryExpr(BinaryExpr.Operator.PLUS, ae, me); :}
                      | additive_expression:ae MINUS multiplicative_expression:me {: RESULT = new BinaryExpr(BinaryExpr.Operator.MINUS, ae, me); :};
                      
shift_expression ::= additive_expression:ae {: RESULT = ae; :}
				   | shift_expression:se SHL additive_expression:ae {: RESULT = new BinaryExpr(BinaryExpr.Operator.SHL, se, ae); :}
				   | shift_expression:se SHR additive_expression:ae {: RESULT = new BinaryExpr(BinaryExpr.Operator.SHR, se, ae); :};
					
relational_expression ::= shift_expression:se {: RESULT = se; :}
					    | relational_expression:re LT shift_expression:se {: RESULT = new BinaryExpr(BinaryExpr.Operator.LT, re, se); :}
	                    | relational_expression:re GT shift_expression:se {: RESULT = new BinaryExpr(BinaryExpr.Operator.GT, re, se); :}
	                    | relational_expression:re LE shift_expression:se {: RESULT = new BinaryExpr(BinaryExpr.Operator.LE, re, se); :}
	                    | relational_expression:re GE shift_expression:se {: RESULT = new BinaryExpr(BinaryExpr.Operator.GE, re, se); :};                

equality_expression	::= relational_expression:re {: RESULT = re; :}
					  | equality_expression:ee EQ relational_expression:re {: RESULT = new BinaryExpr(BinaryExpr.Operator.EQ, ee, re); :}
					  | equality_expression:ee NE relational_expression:re {: RESULT = new BinaryExpr(BinaryExpr.Operator.NE, ee, re); :};	                      

and_expression ::= equality_expression:ee {: RESULT = ee; :}
				 | and_expression:ae BIT_AND equality_expression:ee {: RESULT = new BinaryExpr(BinaryExpr.Operator.BIT_AND, ae, ee); :};
				 
exclusive_or_expression	::= and_expression:ae {: RESULT = ae; :}
						  | exclusive_or_expression:eoe BIT_XOR and_expression:ae {: RESULT = new BinaryExpr(BinaryExpr.Operator.BIT_XOR, eoe, ae); :};
						  
inclusive_or_expression	::= exclusive_or_expression:eoe {: RESULT = eoe; :}
						  | inclusive_or_expression:ioe BIT_OR exclusive_or_expression:eoe {: RESULT = new BinaryExpr(BinaryExpr.Operator.BIT_OR, ioe, eoe); :};
						  
logical_and_expression ::= inclusive_or_expression:ioe {: RESULT = ioe; :}
						 | logical_and_expression:lae AND inclusive_or_expression:ioe {: RESULT = new BinaryExpr(BinaryExpr.Operator.AND, lae, ioe); :};               
                      
logical_or_expression ::= logical_and_expression:lae {: RESULT = lae; :}
						| logical_or_expression:loe OR logical_and_expression:lae {: RESULT = new BinaryExpr(BinaryExpr.Operator.OR, loe, lae); :};
						
assignment_expression ::= logical_or_expression:loe {: RESULT = loe; :}
                        | unary_expression:ue ASSIGN assignment_expression:ae {: RESULT = new AssignmentExpr(AssignmentExpr.Operator.ASSIGN, ue, ae); :}
                        | unary_expression:ue MUL_ASSIGN assignment_expression:ae {: RESULT = new AssignmentExpr(AssignmentExpr.Operator.MUL_ASSIGN, ue, ae); :}
                        | unary_expression:ue DIV_ASSIGN assignment_expression:ae {: RESULT = new AssignmentExpr(AssignmentExpr.Operator.DIV_ASSIGN, ue, ae); :}
                        | unary_expression:ue MOD_ASSIGN assignment_expression:ae {: RESULT = new AssignmentExpr(AssignmentExpr.Operator.MOD_ASSIGN, ue, ae); :}
                        | unary_expression:ue ADD_ASSIGN assignment_expression:ae {: RESULT = new AssignmentExpr(AssignmentExpr.Operator.ADD_ASSIGN, ue, ae); :}
                        | unary_expression:ue SUB_ASSIGN assignment_expression:ae {: RESULT = new AssignmentExpr(AssignmentExpr.Operator.SUB_ASSIGN, ue, ae); :}
                        | unary_expression:ue SHL_ASSIGN assignment_expression:ae {: RESULT = new AssignmentExpr(AssignmentExpr.Operator.SHL_ASSIGN, ue, ae); :}
                        | unary_expression:ue SHR_ASSIGN assignment_expression:ae {: RESULT = new AssignmentExpr(AssignmentExpr.Operator.SHR_ASSIGN, ue, ae); :}
                        | unary_expression:ue AND_ASSIGN assignment_expression:ae {: RESULT = new AssignmentExpr(AssignmentExpr.Operator.AND_ASSIGN, ue, ae); :}
                        | unary_expression:ue XOR_ASSIGN assignment_expression:ae {: RESULT = new AssignmentExpr(AssignmentExpr.Operator.XOR_ASSIGN, ue, ae); :}
                        | unary_expression:ue OR_ASSIGN assignment_expression:ae {: RESULT = new AssignmentExpr(AssignmentExpr.Operator.OR_ASSIGN, ue, ae); :};
				  
constant_expression ::= logical_or_expression:loe {: RESULT = loe; :};

expression ::= assignment_expression:ae {: RESULT = new Expression(ae); :}
			 | expression:e COMMA assignment_expression:ae {: e.next = new Expression(ae); RESULT = e.next; :};

//the declarators, from simple to complex and multiple
star_list ::= /* Empty */ {: RESULT = new StarList(0); :}
            | star_list:ss TIMES {: ++ss.cnt; RESULT = ss; :};

plain_declarator ::= star_list:ss ID:id {: RESULT = new PlainDeclarator(ss, id); :};

declarator ::= var_declarator:vd {: RESULT = vd; :}
             | func_declarator:fd {: RESULT = fd; :};

var_declarator ::= plain_declarator:pd {: RESULT = new VarDeclarator(pd); :}
                 | var_declarator:vd LMPAREN constant_expression:ce RMPAREN {: vd.dimension.add(ce); RESULT = vd; :};

func_declarator ::= plain_declarator:pd LPAREN RPAREN {: RESULT = new FuncDeclarator(pd, null); :}
                  | plain_declarator:pd LPAREN parameter_list:para RPAREN {: RESULT = new FuncDeclarator(pd, para); :};

declarator_list ::= declarator:d {: RESULT = new DeclaratorList(d); :}
                  | declarator_list:ds COMMA declarator:d {: ds.next = new DeclaratorList(d); RESULT = ds.next; :};

init_declarator ::= declarator:d {: RESULT = new InitDeclarator(d, null); :}
                  | declarator:d ASSIGN initializer:i {: RESULT = new InitDeclarator(d, i); :};              

init_declarator_list ::= init_declarator:id {: RESULT = new InitDeclaratorList(id); :}
                       | init_declarator_list:ids COMMA init_declarator:id {: ids.next = new InitDeclaratorList(id); RESULT = ids.next; :};

//the declarations, from simple to complex and multiple
plain_declaration ::= type_specifier:t declarator:d {: RESULT = new PlainDeclaration(t, d); :};

declaration ::= type_specifier:t init_declarator_list:id SEMI {: RESULT = new Declaration(t, id); :}
              | type_specifier:t SEMI {: RESULT = new Declaration(t, null); :};
       
declaration_list ::= declaration:d {: RESULT = new DeclarationList(d); :}
                   | declaration_list:ds declaration:d {: ds.next = new DeclarationList(d); RESULT = ds.next; :};   
       
non_init_declaration ::= type_specifier:t declarator_list:ds SEMI {: RESULT = new NonInitDeclaration(t, ds); :};

non_init_declaration_list ::= non_init_declaration:nid {: RESULT = new NonInitDeclarationList(nid); :}
                            | non_init_declaration_list:nids non_init_declaration:nid {: nids.next = new NonInitDeclarationList(nid); RESULT = nids.next; :};
                 
//initializer, mutual inclusive
initializer ::= assignment_expression:ae {: RESULT = new Initializer(ae, null); :}
              | LBRACE initializer_list:is RBRACE {: RESULT = new Initializer(null, is); :};

initializer_list ::= initializer:i {: RESULT = new InitializerList(i); :}
               | initializer_list:is COMMA initializer:i {: is.next = new InitializerList(i); RESULT = is.next; :};
       
//types
type_specifier ::= VOID {: RESULT = new TypeSpecifier(TypeSpecifier.Type.VOID, null, null); :}
                 | CHAR {: RESULT = new TypeSpecifier(TypeSpecifier.Type.CHAR, null, null); :}
                 | INT {: RESULT = new TypeSpecifier(TypeSpecifier.Type.INT, null, null); :}
                 | STRUCT ID:id LBRACE non_init_declaration_list:nids RBRACE {: RESULT = new TypeSpecifier(TypeSpecifier.Type.STRUCT, id, nids); :}
                 | STRUCT LBRACE non_init_declaration_list:nids RBRACE {: RESULT = new TypeSpecifier(TypeSpecifier.Type.STRUCT, null, nids); :}
                 | STRUCT ID:id {: RESULT = new TypeSpecifier(TypeSpecifier.Type.STRUCT, id, null); :}
                 | UNION ID:id LBRACE non_init_declaration_list:nids RBRACE {: RESULT = new TypeSpecifier(TypeSpecifier.Type.UNION, id, nids); :}
                 | UNION LBRACE non_init_declaration_list:nids RBRACE {: RESULT = new TypeSpecifier(TypeSpecifier.Type.UNION, null, nids); :}
                 | UNION ID:id {: RESULT = new TypeSpecifier(TypeSpecifier.Type.UNION, id, null); :};
                 
type_name ::= type_specifier:ts star_list:ss {: RESULT = new TypeName(ts, ss); :};
            
//function
parameter_list ::= plain_declaration:pd {: RESULT = new ParameterList(pd); :}
                 | parameter_list:p COMMA plain_declaration:pd {: p.next = new ParameterList(pd); RESULT = p.next; :};

argument_list ::= assignment_expression:ae {: RESULT = new ArgumentList(ae); :}  
                | argument_list:arg_list COMMA assignment_expression:ae {: arg_list.next = new ArgumentList(ae); RESULT = arg_list.next; :};

func_def ::= type_specifier:t plain_declarator:pd LPAREN RPAREN compound_stmt:cs {: RESULT = new FuncDef(t, pd, null, cs); :}
           | type_specifier:t plain_declarator:pd LPAREN parameter_list:p RPAREN compound_stmt:cs {: RESULT = new FuncDef(t, pd, p, cs); :};

//program
program ::= prog_comp:pc {: RESULT = new Program(pc); :}
		  | program:p prog_comp:pc {: p.next = new Program(pc); RESULT = p.next; :};

prog_comp ::= declaration:d {: RESULT = d; :}
            | func_def:fd {: RESULT = fd; :};
             
//statements
stmt ::= expression_stmt:es {: RESULT = es; :}
	   | compound_stmt:cs {: RESULT = cs; :}
	   | selection_stmt:ss {: RESULT = ss; :}
	   | iteration_stmt:is {: RESULT = is; :}
	   | jump_stmt:js {: RESULT = js; :};
	   
stmt_list ::= stmt:s {: RESULT = new StmtList(s, null); :}
	        | stmt:s stmt_list:ss {: RESULT = new StmtList(s, ss); :};
	 
expression_stmt ::= SEMI {: RESULT = new ExpressionStmt(null); :}
                  | expression:e SEMI {: RESULT = new ExpressionStmt(e); :};

compound_stmt ::= LBRACE RBRACE {: RESULT = new CompoundStmt(null, null); :}
                | LBRACE stmt_list:ss RBRACE {: RESULT = new CompoundStmt(null, ss); :}
                | LBRACE declaration_list:ds RBRACE {: RESULT = new CompoundStmt(ds, null); :}
                | LBRACE declaration_list:ds stmt_list:ss RBRACE {: RESULT = new CompoundStmt(ds, ss); :};
		 
selection_stmt ::= IF LPAREN expression:cond RPAREN stmt:st1 ELSE stmt:st2 {: RESULT = new SelectionStmt(cond, st1, st2); :}
			     | IF LPAREN expression:cond RPAREN stmt:st {: RESULT = new SelectionStmt(cond, st, null); :};

jump_stmt ::= CONTINUE SEMI {: RESULT = new JumpStmt(JumpStmt.Type.CONTINUE, null); :}
		    | BREAK SEMI {: RESULT = new JumpStmt(JumpStmt.Type.BREAK, null); :}
		    | RETURN SEMI {: RESULT = new JumpStmt(JumpStmt.Type.RETURN, null); :}
		    | RETURN expression:e SEMI {: RESULT = new JumpStmt(JumpStmt.Type.RETURN, e); :};
		    
iteration_stmt ::= WHILE LPAREN expression:cond RPAREN stmt:st {: RESULT = new IterationStmt(cond, st); :}
			     | FOR LPAREN  SEMI  SEMI  RPAREN stmt:st {: RESULT = new IterationStmt(null, null, null, st); :}
			     | FOR LPAREN  SEMI  SEMI expression:e3 RPAREN stmt:st {: RESULT = new IterationStmt(null, null, e3, st); :}
			     | FOR LPAREN  SEMI expression:e2 SEMI  RPAREN stmt:st {: RESULT = new IterationStmt(null, e2, null, st); :}
			     | FOR LPAREN  SEMI expression:e2 SEMI expression:e3 RPAREN stmt:st {: RESULT = new IterationStmt(null, e2, e3, st); :}
			     | FOR LPAREN expression:e1 SEMI  SEMI  RPAREN stmt:st {: RESULT = new IterationStmt(e1, null, null, st); :}
			     | FOR LPAREN expression:e1 SEMI  SEMI expression:e3 RPAREN stmt:st {: RESULT = new IterationStmt(e1, null, e3, st); :}
			     | FOR LPAREN expression:e1 SEMI expression:e2 SEMI  RPAREN stmt:st {: RESULT = new IterationStmt(e1, e2, null, st); :}
			     | FOR LPAREN expression:e1 SEMI expression:e2 SEMI expression:e3 RPAREN stmt:st {: RESULT = new IterationStmt(e1, e2, e3, st); :};
			