
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.syntactic;

import java.io.*;
import compiler.ast.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\002\004\000\002\052\003\000\002\052" +
    "\003\000\002\052\005\000\002\052\003\000\002\052\003" +
    "\000\002\051\003\000\002\051\006\000\002\051\005\000" +
    "\002\051\006\000\002\051\005\000\002\051\005\000\002" +
    "\051\004\000\002\051\004\000\002\050\003\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\006\000\002" +
    "\047\003\000\002\047\006\000\002\046\003\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\045\003" +
    "\000\002\045\005\000\002\045\005\000\002\044\003\000" +
    "\002\044\005\000\002\044\005\000\002\043\003\000\002" +
    "\043\005\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\042\003\000\002\042\005\000\002\042\005" +
    "\000\002\041\003\000\002\041\005\000\002\040\003\000" +
    "\002\040\005\000\002\037\003\000\002\037\005\000\002" +
    "\035\003\000\002\035\005\000\002\036\003\000\002\036" +
    "\005\000\002\034\003\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\053" +
    "\003\000\002\033\003\000\002\033\005\000\002\004\003" +
    "\000\002\004\004\000\002\005\003\000\002\005\004\000" +
    "\002\006\003\000\002\006\006\000\002\013\003\000\002" +
    "\013\005\000\002\007\003\000\002\007\005\000\002\014" +
    "\003\000\002\014\005\000\002\010\004\000\002\011\005" +
    "\000\002\011\004\000\002\015\003\000\002\015\004\000" +
    "\002\012\005\000\002\016\003\000\002\016\004\000\002" +
    "\017\003\000\002\017\005\000\002\020\003\000\002\020" +
    "\005\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\007\000\002\021\006\000\002\021\004\000" +
    "\002\021\007\000\002\021\006\000\002\021\004\000\002" +
    "\054\003\000\002\054\004\000\002\022\003\000\002\022" +
    "\005\000\002\055\003\000\002\055\005\000\002\023\007" +
    "\000\002\023\010\000\002\002\003\000\002\002\004\000" +
    "\002\003\003\000\002\003\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\025\003\000\002\025\004\000\002\026\003" +
    "\000\002\026\004\000\002\027\004\000\002\027\005\000" +
    "\002\027\005\000\002\027\006\000\002\030\011\000\002" +
    "\030\007\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\005\000\002\032\007\000\002\032\010" +
    "\000\002\032\011\000\002\032\011\000\002\032\012\000" +
    "\002\032\011\000\002\032\012\000\002\032\012\000\002" +
    "\032\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\014\004\010\005\015\006\004\007\007\010" +
    "\005\001\002\000\012\022\uffa1\027\uffa1\033\uffa1\074\uffa1" +
    "\001\002\000\006\023\u010c\074\u010b\001\002\000\016\002" +
    "\uff92\004\uff92\005\uff92\006\uff92\007\uff92\010\uff92\001\002" +
    "\000\006\023\375\074\374\001\002\000\012\022\uffa3\027" +
    "\uffa3\033\uffa3\074\uffa3\001\002\000\016\002\373\004\010" +
    "\005\015\006\004\007\007\010\005\001\002\000\010\027" +
    "\021\033\024\074\016\001\002\000\016\002\uff8f\004\uff8f" +
    "\005\uff8f\006\uff8f\007\uff8f\010\uff8f\001\002\000\016\002" +
    "\uff90\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\001\002" +
    "\000\012\022\uffa2\027\uffa2\033\uffa2\074\uffa2\001\002\000" +
    "\016\021\uffb9\022\uffb9\025\uffb9\027\uffb9\030\uffb9\065\uffb9" +
    "\001\002\000\006\033\274\074\371\001\002\000\012\025" +
    "\351\027\uffb3\030\uffb3\065\360\001\002\000\074\002\uffad" +
    "\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\013" +
    "\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad" +
    "\023\uffad\024\uffad\027\uffad\031\uffad\032\uffad\033\uffad\036" +
    "\uffad\037\uffad\052\uffad\070\uffad\071\uffad\074\uffad\075\uffad" +
    "\076\uffad\077\uffad\001\002\000\006\027\uffb1\030\uffb1\001" +
    "\002\000\006\027\356\030\355\001\002\000\010\022\uffbb" +
    "\033\uffbb\074\uffbb\001\002\000\014\021\026\025\uffb7\027" +
    "\uffb7\030\uffb7\065\uffb7\001\002\000\016\004\010\005\015" +
    "\006\004\007\007\010\005\022\031\001\002\000\006\022" +
    "\uff98\030\uff98\001\002\000\006\033\024\074\016\001\002" +
    "\000\004\023\035\001\002\000\006\022\034\030\033\001" +
    "\002\000\014\004\010\005\015\006\004\007\007\010\005" +
    "\001\002\000\004\023\035\001\002\000\072\004\010\005" +
    "\015\006\004\007\007\010\005\011\066\013\106\014\050" +
    "\015\044\016\076\017\074\020\053\021\045\023\035\024" +
    "\107\027\046\031\065\032\051\033\102\036\061\037\111" +
    "\052\054\070\041\071\042\074\071\075\064\076\115\077" +
    "\037\001\002\000\016\002\uff93\004\uff93\005\uff93\006\uff93" +
    "\007\uff93\010\uff93\001\002\000\122\021\ufffc\022\ufffc\024" +
    "\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc" +
    "\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041" +
    "\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc" +
    "\050\ufffc\051\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057" +
    "\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc" +
    "\066\ufffc\067\ufffc\070\ufffc\072\ufffc\073\ufffc\001\002\000" +
    "\052\022\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf\031\130" +
    "\032\131\053\uffdf\054\uffdf\057\uffdf\060\uffdf\061\uffdf\062" +
    "\uffdf\063\uffdf\064\uffdf\066\uffdf\067\uffdf\070\uffdf\072\uffdf" +
    "\073\uffdf\001\002\000\036\020\053\021\045\031\065\032" +
    "\051\033\102\036\061\037\111\052\054\070\041\071\042" +
    "\074\071\075\064\076\115\077\037\001\002\000\036\020" +
    "\053\021\045\031\065\032\051\033\102\036\061\037\111" +
    "\052\054\070\041\071\042\074\071\075\064\076\115\077" +
    "\037\001\002\000\072\004\010\005\015\006\004\007\007" +
    "\010\005\011\066\013\106\014\050\015\044\016\076\017" +
    "\074\020\053\021\045\023\035\024\341\027\046\031\065" +
    "\032\051\033\102\036\061\037\111\052\054\070\041\071" +
    "\042\074\071\075\064\076\115\077\037\001\002\000\004" +
    "\027\337\001\002\000\050\004\010\005\015\006\004\007" +
    "\007\010\005\020\053\021\045\031\065\032\051\033\102" +
    "\036\061\037\111\052\054\070\041\071\042\074\071\075" +
    "\064\076\115\077\037\001\002\000\062\011\uff87\012\uff87" +
    "\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021" +
    "\uff87\023\uff87\024\uff87\027\uff87\031\uff87\032\uff87\033\uff87" +
    "\036\uff87\037\uff87\052\uff87\070\uff87\071\uff87\074\uff87\075" +
    "\uff87\076\uff87\077\uff87\001\002\000\062\011\uff8c\012\uff8c" +
    "\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021" +
    "\uff8c\023\uff8c\024\uff8c\027\uff8c\031\uff8c\032\uff8c\033\uff8c" +
    "\036\uff8c\037\uff8c\052\uff8c\070\uff8c\071\uff8c\074\uff8c\075" +
    "\uff8c\076\uff8c\077\uff8c\001\002\000\004\021\276\001\002" +
    "\000\036\020\053\021\045\031\065\032\051\033\102\036" +
    "\061\037\111\052\054\070\041\071\042\074\071\075\064" +
    "\076\115\077\037\001\002\000\122\021\ufffb\022\ufffb\024" +
    "\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057" +
    "\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\067\ufffb\070\ufffb\072\ufffb\073\ufffb\001\002\000" +
    "\036\020\053\021\267\031\065\032\051\033\102\036\061" +
    "\037\111\052\054\070\041\071\042\074\071\075\064\076" +
    "\115\077\037\001\002\000\036\020\053\021\045\031\065" +
    "\032\051\033\102\036\061\037\111\052\054\070\041\071" +
    "\042\074\071\075\064\076\115\077\037\001\002\000\016" +
    "\022\uffca\024\uffca\026\uffca\027\uffca\030\uffca\053\263\001" +
    "\002\000\032\022\uffd4\024\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\053\uffd4\054\uffd4\057\166\060\167\066\uffd4\067\uffd4\070" +
    "\uffd4\001\002\000\024\022\uffd0\024\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\053\uffd0\054\uffd0\066\uffd0\067\162\001\002\000" +
    "\060\022\uffe6\024\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\053\uffe6\054\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\066\uffe6" +
    "\067\uffe6\070\uffe6\072\uffe6\073\uffe6\001\002\000\036\020" +
    "\053\021\147\031\065\032\051\033\102\036\061\037\111" +
    "\052\054\070\041\071\042\074\071\075\064\076\115\077" +
    "\037\001\002\000\062\011\uff8a\012\uff8a\013\uff8a\014\uff8a" +
    "\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\023\uff8a\024" +
    "\uff8a\027\uff8a\031\uff8a\032\uff8a\033\uff8a\036\uff8a\037\uff8a" +
    "\052\uff8a\070\uff8a\071\uff8a\074\uff8a\075\uff8a\076\uff8a\077" +
    "\uff8a\001\002\000\062\011\uff8d\012\uff8d\013\uff8d\014\uff8d" +
    "\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\023\uff8d\024" +
    "\uff8d\027\uff8d\031\uff8d\032\uff8d\033\uff8d\036\uff8d\037\uff8d" +
    "\052\uff8d\070\uff8d\071\uff8d\074\uff8d\075\uff8d\076\uff8d\077" +
    "\uff8d\001\002\000\122\021\ufffd\022\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd" +
    "\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd" +
    "\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067" +
    "\ufffd\070\ufffd\072\ufffd\073\ufffd\001\002\000\036\020\053" +
    "\021\045\031\065\032\051\033\102\036\061\037\111\052" +
    "\054\070\041\071\042\074\071\075\064\076\115\077\037" +
    "\001\002\000\004\021\253\001\002\000\062\011\uff8e\012" +
    "\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e" +
    "\021\uff8e\023\uff8e\024\uff8e\027\uff8e\031\uff8e\032\uff8e\033" +
    "\uff8e\036\uff8e\037\uff8e\052\uff8e\070\uff8e\071\uff8e\074\uff8e" +
    "\075\uff8e\076\uff8e\077\uff8e\001\002\000\060\011\066\013" +
    "\106\014\050\015\044\016\076\017\074\020\053\021\045" +
    "\023\035\024\251\027\046\031\065\032\051\033\102\036" +
    "\061\037\111\052\054\070\041\071\042\074\071\075\064" +
    "\076\115\077\037\001\002\000\122\021\000\022\000\024" +
    "\000\025\000\026\000\027\000\030\000\031\000\032\000" +
    "\033\000\034\000\035\000\036\000\037\000\040\000\041" +
    "\000\042\000\043\000\044\000\045\000\046\000\047\000" +
    "\050\000\051\000\053\000\054\000\055\000\056\000\057" +
    "\000\060\000\061\000\062\000\063\000\064\000\065\000" +
    "\066\000\067\000\070\000\072\000\073\000\001\002\000" +
    "\006\027\250\030\151\001\002\000\106\022\uffe8\024\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\040\223\041\226\042\232\043\225\044\224" +
    "\045\234\046\233\047\227\050\222\051\231\053\uffe8\054" +
    "\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8" +
    "\065\230\066\uffe8\067\uffe8\070\uffe8\072\uffe8\073\uffe8\001" +
    "\002\000\040\020\053\021\045\027\217\031\065\032\051" +
    "\033\102\036\061\037\111\052\054\070\041\071\042\074" +
    "\071\075\064\076\115\077\037\001\002\000\010\027\021" +
    "\033\024\074\016\001\002\000\004\027\215\001\002\000" +
    "\122\021\201\022\ufff3\024\ufff3\025\175\026\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036" +
    "\176\037\200\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\053\ufff3\054" +
    "\ufff3\055\202\056\177\057\ufff3\060\ufff3\061\ufff3\062\ufff3" +
    "\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\072" +
    "\ufff3\073\ufff3\001\002\000\020\022\uffcc\024\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\053\uffcc\054\173\001\002\000\046\022" +
    "\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc\053\uffdc\054\uffdc" +
    "\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\066" +
    "\uffdc\067\uffdc\070\uffdc\072\126\073\125\001\002\000\036" +
    "\020\053\021\045\031\065\032\051\033\102\036\061\037" +
    "\111\052\054\070\041\071\042\074\071\075\064\076\115" +
    "\077\037\001\002\000\026\022\uffd2\024\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\053\uffd2\054\uffd2\066\uffd2\067\uffd2\070\164" +
    "\001\002\000\022\022\uffce\024\uffce\026\uffce\027\uffce\030" +
    "\uffce\053\uffce\054\uffce\066\160\001\002\000\012\022\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\001\002\000\004\021\154\001" +
    "\002\000\076\002\uff85\004\uff85\005\uff85\006\uff85\007\uff85" +
    "\010\uff85\011\uff85\012\uff85\013\uff85\014\uff85\015\uff85\016" +
    "\uff85\017\uff85\020\uff85\021\uff85\023\uff85\024\uff85\027\uff85" +
    "\031\uff85\032\uff85\033\uff85\036\uff85\037\uff85\052\uff85\070" +
    "\uff85\071\uff85\074\uff85\075\uff85\076\uff85\077\uff85\001\002" +
    "\000\060\022\uffe2\024\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\135\034\134\035\133\053\uffe2\054\uffe2" +
    "\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\066" +
    "\uffe2\067\uffe2\070\uffe2\072\uffe2\073\uffe2\001\002\000\036" +
    "\020\053\021\147\031\065\032\051\033\102\036\061\037" +
    "\111\052\054\070\041\071\042\074\071\075\064\076\115" +
    "\077\037\001\002\000\072\004\uffac\005\uffac\006\uffac\007" +
    "\uffac\010\uffac\011\uffac\013\uffac\014\uffac\015\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\uffac\023\uffac\024\uffac\027\uffac\031" +
    "\uffac\032\uffac\033\uffac\036\uffac\037\uffac\052\uffac\070\uffac" +
    "\071\uffac\074\uffac\075\uffac\076\uffac\077\uffac\001\002\000" +
    "\062\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b" +
    "\017\uff8b\020\uff8b\021\uff8b\023\uff8b\024\uff8b\027\uff8b\031" +
    "\uff8b\032\uff8b\033\uff8b\036\uff8b\037\uff8b\052\uff8b\070\uff8b" +
    "\071\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b\001\002\000" +
    "\042\022\uffd7\024\uffd7\026\uffd7\027\uffd7\030\uffd7\053\uffd7" +
    "\054\uffd7\057\uffd7\060\uffd7\061\117\062\121\063\120\064" +
    "\122\066\uffd7\067\uffd7\070\uffd7\001\002\000\122\021\uffff" +
    "\022\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031" +
    "\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff" +
    "\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046" +
    "\uffff\047\uffff\050\uffff\051\uffff\053\uffff\054\uffff\055\uffff" +
    "\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff\064" +
    "\uffff\065\uffff\066\uffff\067\uffff\070\uffff\072\uffff\073\uffff" +
    "\001\002\000\060\011\uff89\013\uff89\014\uff89\015\uff89\016" +
    "\uff89\017\uff89\020\uff89\021\uff89\023\uff89\024\uff89\027\uff89" +
    "\031\uff89\032\uff89\033\uff89\036\uff89\037\uff89\052\uff89\070" +
    "\uff89\071\uff89\074\uff89\075\uff89\076\uff89\077\uff89\001\002" +
    "\000\036\020\053\021\045\031\065\032\051\033\102\036" +
    "\061\037\111\052\054\070\041\071\042\074\071\075\064" +
    "\076\115\077\037\001\002\000\036\020\053\021\045\031" +
    "\065\032\051\033\102\036\061\037\111\052\054\070\041" +
    "\071\042\074\071\075\064\076\115\077\037\001\002\000" +
    "\036\020\053\021\045\031\065\032\051\033\102\036\061" +
    "\037\111\052\054\070\041\071\042\074\071\075\064\076" +
    "\115\077\037\001\002\000\036\020\053\021\045\031\065" +
    "\032\051\033\102\036\061\037\111\052\054\070\041\071" +
    "\042\074\071\075\064\076\115\077\037\001\002\000\106" +
    "\022\uffe8\024\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\053\uffe8\054\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8" +
    "\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\072" +
    "\uffe8\073\uffe8\001\002\000\046\022\uffd8\024\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\053\uffd8\054\uffd8\057\uffd8\060\uffd8\061" +
    "\uffd8\062\uffd8\063\uffd8\064\uffd8\066\uffd8\067\uffd8\070\uffd8" +
    "\072\126\073\125\001\002\000\036\020\053\021\045\031" +
    "\065\032\051\033\102\036\061\037\111\052\054\070\041" +
    "\071\042\074\071\075\064\076\115\077\037\001\002\000" +
    "\036\020\053\021\045\031\065\032\051\033\102\036\061" +
    "\037\111\052\054\070\041\071\042\074\071\075\064\076" +
    "\115\077\037\001\002\000\052\022\uffde\024\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\130\032\131\053\uffde\054\uffde\057" +
    "\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\066\uffde" +
    "\067\uffde\070\uffde\072\uffde\073\uffde\001\002\000\036\020" +
    "\053\021\045\031\065\032\051\033\102\036\061\037\111" +
    "\052\054\070\041\071\042\074\071\075\064\076\115\077" +
    "\037\001\002\000\036\020\053\021\045\031\065\032\051" +
    "\033\102\036\061\037\111\052\054\070\041\071\042\074" +
    "\071\075\064\076\115\077\037\001\002\000\060\022\uffe0" +
    "\024\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\135\034\134\035\133\053\uffe0\054\uffe0\057\uffe0\060\uffe0" +
    "\061\uffe0\062\uffe0\063\uffe0\064\uffe0\066\uffe0\067\uffe0\070" +
    "\uffe0\072\uffe0\073\uffe0\001\002\000\036\020\053\021\045" +
    "\031\065\032\051\033\102\036\061\037\111\052\054\070" +
    "\041\071\042\074\071\075\064\076\115\077\037\001\002" +
    "\000\036\020\053\021\045\031\065\032\051\033\102\036" +
    "\061\037\111\052\054\070\041\071\042\074\071\075\064" +
    "\076\115\077\037\001\002\000\036\020\053\021\045\031" +
    "\065\032\051\033\102\036\061\037\111\052\054\070\041" +
    "\071\042\074\071\075\064\076\115\077\037\001\002\000" +
    "\060\022\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\053\uffe5\054\uffe5\057" +
    "\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\072\uffe5\073\uffe5\001\002\000\060\022" +
    "\uffe4\024\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\053\uffe4\054\uffe4\057\uffe4\060" +
    "\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\066\uffe4\067\uffe4" +
    "\070\uffe4\072\uffe4\073\uffe4\001\002\000\060\022\uffe3\024" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\053\uffe3\054\uffe3\057\uffe3\060\uffe3\061" +
    "\uffe3\062\uffe3\063\uffe3\064\uffe3\066\uffe3\067\uffe3\070\uffe3" +
    "\072\uffe3\073\uffe3\001\002\000\060\022\uffe1\024\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\135\034\134" +
    "\035\133\053\uffe1\054\uffe1\057\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\064\uffe1\066\uffe1\067\uffe1\070\uffe1\072\uffe1" +
    "\073\uffe1\001\002\000\052\022\uffdd\024\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\031\130\032\131\053\uffdd\054\uffdd\057\uffdd" +
    "\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\066\uffdd\067" +
    "\uffdd\070\uffdd\072\uffdd\073\uffdd\001\002\000\046\022\uffd9" +
    "\024\uffd9\026\uffd9\027\uffd9\030\uffd9\053\uffd9\054\uffd9\057" +
    "\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\066\uffd9" +
    "\067\uffd9\070\uffd9\072\126\073\125\001\002\000\046\022" +
    "\uffda\024\uffda\026\uffda\027\uffda\030\uffda\053\uffda\054\uffda" +
    "\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\066" +
    "\uffda\067\uffda\070\uffda\072\126\073\125\001\002\000\046" +
    "\022\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb\053\uffdb\054" +
    "\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb" +
    "\066\uffdb\067\uffdb\070\uffdb\072\126\073\125\001\002\000" +
    "\106\022\ufff1\024\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\034\ufff1\035\ufff1\040\ufff1\041\ufff1\042" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1" +
    "\051\ufff1\053\ufff1\054\ufff1\057\ufff1\060\ufff1\061\ufff1\062" +
    "\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1" +
    "\072\ufff1\073\ufff1\001\002\000\036\020\053\021\045\031" +
    "\065\032\051\033\102\036\061\037\111\052\054\070\041" +
    "\071\042\074\071\075\064\076\115\077\037\001\002\000" +
    "\006\022\152\030\151\001\002\000\036\020\053\021\045" +
    "\031\065\032\051\033\102\036\061\037\111\052\054\070" +
    "\041\071\042\074\071\075\064\076\115\077\037\001\002" +
    "\000\122\021\ufffe\022\ufffe\024\ufffe\025\ufffe\026\ufffe\027" +
    "\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe" +
    "\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\053\ufffe" +
    "\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062" +
    "\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe" +
    "\072\ufffe\073\ufffe\001\002\000\012\022\uffbc\026\uffbc\027" +
    "\uffbc\030\uffbc\001\002\000\036\020\053\021\045\031\065" +
    "\032\051\033\102\036\061\037\111\052\054\070\041\071" +
    "\042\074\071\075\064\076\115\077\037\001\002\000\006" +
    "\022\156\030\151\001\002\000\056\011\066\013\106\014" +
    "\050\015\044\016\076\017\074\020\053\021\045\023\035" +
    "\027\046\031\065\032\051\033\102\036\061\037\111\052" +
    "\054\070\041\071\042\074\071\075\064\076\115\077\037" +
    "\001\002\000\062\011\uff7b\012\uff7b\013\uff7b\014\uff7b\015" +
    "\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b\023\uff7b\024\uff7b" +
    "\027\uff7b\031\uff7b\032\uff7b\033\uff7b\036\uff7b\037\uff7b\052" +
    "\uff7b\070\uff7b\071\uff7b\074\uff7b\075\uff7b\076\uff7b\077\uff7b" +
    "\001\002\000\036\020\053\021\045\031\065\032\051\033" +
    "\102\036\061\037\111\052\054\070\041\071\042\074\071" +
    "\075\064\076\115\077\037\001\002\000\024\022\uffcf\024" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\053\uffcf\054\uffcf\066\uffcf" +
    "\067\162\001\002\000\036\020\053\021\045\031\065\032" +
    "\051\033\102\036\061\037\111\052\054\070\041\071\042" +
    "\074\071\075\064\076\115\077\037\001\002\000\026\022" +
    "\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\053\uffd1\054\uffd1" +
    "\066\uffd1\067\uffd1\070\164\001\002\000\036\020\053\021" +
    "\045\031\065\032\051\033\102\036\061\037\111\052\054" +
    "\070\041\071\042\074\071\075\064\076\115\077\037\001" +
    "\002\000\032\022\uffd3\024\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\053\uffd3\054\uffd3\057\166\060\167\066\uffd3\067\uffd3\070" +
    "\uffd3\001\002\000\036\020\053\021\045\031\065\032\051" +
    "\033\102\036\061\037\111\052\054\070\041\071\042\074" +
    "\071\075\064\076\115\077\037\001\002\000\036\020\053" +
    "\021\045\031\065\032\051\033\102\036\061\037\111\052" +
    "\054\070\041\071\042\074\071\075\064\076\115\077\037" +
    "\001\002\000\042\022\uffd5\024\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\053\uffd5\054\uffd5\057\uffd5\060\uffd5\061\117\062\121" +
    "\063\120\064\122\066\uffd5\067\uffd5\070\uffd5\001\002\000" +
    "\042\022\uffd6\024\uffd6\026\uffd6\027\uffd6\030\uffd6\053\uffd6" +
    "\054\uffd6\057\uffd6\060\uffd6\061\117\062\121\063\120\064" +
    "\122\066\uffd6\067\uffd6\070\uffd6\001\002\000\106\022\uffef" +
    "\024\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\040\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef\053" +
    "\uffef\054\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef" +
    "\064\uffef\065\uffef\066\uffef\067\uffef\070\uffef\072\uffef\073" +
    "\uffef\001\002\000\036\020\053\021\045\031\065\032\051" +
    "\033\102\036\061\037\111\052\054\070\041\071\042\074" +
    "\071\075\064\076\115\077\037\001\002\000\022\022\uffcd" +
    "\024\uffcd\026\uffcd\027\uffcd\030\uffcd\053\uffcd\054\uffcd\066" +
    "\160\001\002\000\036\020\053\021\045\031\065\032\051" +
    "\033\102\036\061\037\111\052\054\070\041\071\042\074" +
    "\071\075\064\076\115\077\037\001\002\000\122\021\ufff5" +
    "\022\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\051\ufff5\053\ufff5\054\ufff5\055\ufff5" +
    "\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064" +
    "\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\072\ufff5\073\ufff5" +
    "\001\002\000\004\074\212\001\002\000\122\021\ufff4\022" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4" +
    "\047\ufff4\050\ufff4\051\ufff4\053\ufff4\054\ufff4\055\ufff4\056" +
    "\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4" +
    "\065\ufff4\066\ufff4\067\ufff4\070\ufff4\072\ufff4\073\ufff4\001" +
    "\002\000\040\020\053\021\045\022\204\031\065\032\051" +
    "\033\102\036\061\037\111\052\054\070\041\071\042\074" +
    "\071\075\064\076\115\077\037\001\002\000\004\074\203" +
    "\001\002\000\122\021\ufff7\022\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043" +
    "\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7" +
    "\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061" +
    "\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7" +
    "\070\ufff7\072\ufff7\073\ufff7\001\002\000\122\021\ufff9\022" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040" +
    "\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\053\ufff9\054\ufff9\055\ufff9\056" +
    "\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9" +
    "\065\ufff9\066\ufff9\067\ufff9\070\ufff9\072\ufff9\073\ufff9\001" +
    "\002\000\006\022\uff96\030\uff96\001\002\000\006\022\210" +
    "\030\207\001\002\000\036\020\053\021\045\031\065\032" +
    "\051\033\102\036\061\037\111\052\054\070\041\071\042" +
    "\074\071\075\064\076\115\077\037\001\002\000\122\021" +
    "\ufff8\022\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8" +
    "\046\ufff8\047\ufff8\050\ufff8\051\ufff8\053\ufff8\054\ufff8\055" +
    "\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8" +
    "\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\072\ufff8\073" +
    "\ufff8\001\002\000\006\022\uff95\030\uff95\001\002\000\122" +
    "\021\ufff6\022\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045" +
    "\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\053\ufff6\054\ufff6" +
    "\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063" +
    "\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\072\ufff6" +
    "\073\ufff6\001\002\000\006\026\214\030\151\001\002\000" +
    "\122\021\ufffa\022\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa" +
    "\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036" +
    "\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\053\ufffa\054" +
    "\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa" +
    "\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\070\ufffa\072" +
    "\ufffa\073\ufffa\001\002\000\062\011\uff7e\012\uff7e\013\uff7e" +
    "\014\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\023" +
    "\uff7e\024\uff7e\027\uff7e\031\uff7e\032\uff7e\033\uff7e\036\uff7e" +
    "\037\uff7e\052\uff7e\070\uff7e\071\uff7e\074\uff7e\075\uff7e\076" +
    "\uff7e\077\uff7e\001\002\000\014\022\uffb7\025\uffb7\027\uffb7" +
    "\030\uffb7\065\uffb7\001\002\000\062\011\uff7d\012\uff7d\013" +
    "\uff7d\014\uff7d\015\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d" +
    "\023\uff7d\024\uff7d\027\uff7d\031\uff7d\032\uff7d\033\uff7d\036" +
    "\uff7d\037\uff7d\052\uff7d\070\uff7d\071\uff7d\074\uff7d\075\uff7d" +
    "\076\uff7d\077\uff7d\001\002\000\006\027\221\030\151\001" +
    "\002\000\062\011\uff7c\012\uff7c\013\uff7c\014\uff7c\015\uff7c" +
    "\016\uff7c\017\uff7c\020\uff7c\021\uff7c\023\uff7c\024\uff7c\027" +
    "\uff7c\031\uff7c\032\uff7c\033\uff7c\036\uff7c\037\uff7c\052\uff7c" +
    "\070\uff7c\071\uff7c\074\uff7c\075\uff7c\076\uff7c\077\uff7c\001" +
    "\002\000\036\020\053\021\045\031\065\032\051\033\102" +
    "\036\061\037\111\052\054\070\041\071\042\074\071\075" +
    "\064\076\115\077\037\001\002\000\036\020\053\021\045" +
    "\031\065\032\051\033\102\036\061\037\111\052\054\070" +
    "\041\071\042\074\071\075\064\076\115\077\037\001\002" +
    "\000\036\020\053\021\045\031\065\032\051\033\102\036" +
    "\061\037\111\052\054\070\041\071\042\074\071\075\064" +
    "\076\115\077\037\001\002\000\036\020\053\021\045\031" +
    "\065\032\051\033\102\036\061\037\111\052\054\070\041" +
    "\071\042\074\071\075\064\076\115\077\037\001\002\000" +
    "\036\020\053\021\045\031\065\032\051\033\102\036\061" +
    "\037\111\052\054\070\041\071\042\074\071\075\064\076" +
    "\115\077\037\001\002\000\036\020\053\021\045\031\065" +
    "\032\051\033\102\036\061\037\111\052\054\070\041\071" +
    "\042\074\071\075\064\076\115\077\037\001\002\000\036" +
    "\020\053\021\045\031\065\032\051\033\102\036\061\037" +
    "\111\052\054\070\041\071\042\074\071\075\064\076\115" +
    "\077\037\001\002\000\036\020\053\021\045\031\065\032" +
    "\051\033\102\036\061\037\111\052\054\070\041\071\042" +
    "\074\071\075\064\076\115\077\037\001\002\000\036\020" +
    "\053\021\045\031\065\032\051\033\102\036\061\037\111" +
    "\052\054\070\041\071\042\074\071\075\064\076\115\077" +
    "\037\001\002\000\036\020\053\021\045\031\065\032\051" +
    "\033\102\036\061\037\111\052\054\070\041\071\042\074" +
    "\071\075\064\076\115\077\037\001\002\000\036\020\053" +
    "\021\045\031\065\032\051\033\102\036\061\037\111\052" +
    "\054\070\041\071\042\074\071\075\064\076\115\077\037" +
    "\001\002\000\014\022\uffc3\024\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\001\002\000\014\022\uffc2\024\uffc2\026\uffc2\027\uffc2" +
    "\030\uffc2\001\002\000\014\022\uffc6\024\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\001\002\000\014\022\uffbf\024\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\001\002\000\014\022\uffc9\024\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\001\002\000\014\022\uffc1\024\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\001\002\000\014\022\uffc7\024" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\001\002\000\014\022\uffc5" +
    "\024\uffc5\026\uffc5\027\uffc5\030\uffc5\001\002\000\014\022" +
    "\uffc4\024\uffc4\026\uffc4\027\uffc4\030\uffc4\001\002\000\014" +
    "\022\uffc8\024\uffc8\026\uffc8\027\uffc8\030\uffc8\001\002\000" +
    "\014\022\uffc0\024\uffc0\026\uffc0\027\uffc0\030\uffc0\001\002" +
    "\000\062\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016" +
    "\uff86\017\uff86\020\uff86\021\uff86\023\uff86\024\uff86\027\uff86" +
    "\031\uff86\032\uff86\033\uff86\036\uff86\037\uff86\052\uff86\070" +
    "\uff86\071\uff86\074\uff86\075\uff86\076\uff86\077\uff86\001\002" +
    "\000\076\002\uff84\004\uff84\005\uff84\006\uff84\007\uff84\010" +
    "\uff84\011\uff84\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84" +
    "\017\uff84\020\uff84\021\uff84\023\uff84\024\uff84\027\uff84\031" +
    "\uff84\032\uff84\033\uff84\036\uff84\037\uff84\052\uff84\070\uff84" +
    "\071\uff84\074\uff84\075\uff84\076\uff84\077\uff84\001\002\000" +
    "\060\011\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017\uff88" +
    "\020\uff88\021\uff88\023\uff88\024\uff88\027\uff88\031\uff88\032" +
    "\uff88\033\uff88\036\uff88\037\uff88\052\uff88\070\uff88\071\uff88" +
    "\074\uff88\075\uff88\076\uff88\077\uff88\001\002\000\036\020" +
    "\053\021\045\031\065\032\051\033\102\036\061\037\111" +
    "\052\054\070\041\071\042\074\071\075\064\076\115\077" +
    "\037\001\002\000\006\022\255\030\151\001\002\000\056" +
    "\011\066\013\106\014\050\015\044\016\076\017\074\020" +
    "\053\021\045\023\035\027\046\031\065\032\051\033\102" +
    "\036\061\037\111\052\054\070\041\071\042\074\071\075" +
    "\064\076\115\077\037\001\002\000\062\011\uff80\012\257" +
    "\013\uff80\014\uff80\015\uff80\016\uff80\017\uff80\020\uff80\021" +
    "\uff80\023\uff80\024\uff80\027\uff80\031\uff80\032\uff80\033\uff80" +
    "\036\uff80\037\uff80\052\uff80\070\uff80\071\uff80\074\uff80\075" +
    "\uff80\076\uff80\077\uff80\001\002\000\056\011\066\013\106" +
    "\014\050\015\044\016\076\017\074\020\053\021\045\023" +
    "\035\027\046\031\065\032\051\033\102\036\061\037\111" +
    "\052\054\070\041\071\042\074\071\075\064\076\115\077" +
    "\037\001\002\000\062\011\uff81\012\uff81\013\uff81\014\uff81" +
    "\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\023\uff81\024" +
    "\uff81\027\uff81\031\uff81\032\uff81\033\uff81\036\uff81\037\uff81" +
    "\052\uff81\070\uff81\071\uff81\074\uff81\075\uff81\076\uff81\077" +
    "\uff81\001\002\000\106\022\uffee\024\uffee\026\uffee\027\uffee" +
    "\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\040" +
    "\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee" +
    "\047\uffee\050\uffee\051\uffee\053\uffee\054\uffee\057\uffee\060" +
    "\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065\uffee\066\uffee" +
    "\067\uffee\070\uffee\072\uffee\073\uffee\001\002\000\106\022" +
    "\ufff2\024\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\040\ufff2\041\ufff2\042\ufff2\043" +
    "\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2" +
    "\053\ufff2\054\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063" +
    "\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2\072\ufff2" +
    "\073\ufff2\001\002\000\036\020\053\021\045\031\065\032" +
    "\051\033\102\036\061\037\111\052\054\070\041\071\042" +
    "\074\071\075\064\076\115\077\037\001\002\000\020\022" +
    "\uffcb\024\uffcb\026\uffcb\027\uffcb\030\uffcb\053\uffcb\054\173" +
    "\001\002\000\106\022\uffeb\024\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\040\uffeb" +
    "\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047" +
    "\uffeb\050\uffeb\051\uffeb\053\uffeb\054\uffeb\057\uffeb\060\uffeb" +
    "\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067" +
    "\uffeb\070\uffeb\072\uffeb\073\uffeb\001\002\000\106\022\uffea" +
    "\024\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\035\uffea\040\uffea\041\uffea\042\uffea\043\uffea" +
    "\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\053" +
    "\uffea\054\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea" +
    "\064\uffea\065\uffea\066\uffea\067\uffea\070\uffea\072\uffea\073" +
    "\uffea\001\002\000\050\004\010\005\015\006\004\007\007" +
    "\010\005\020\053\021\045\031\065\032\051\033\102\036" +
    "\061\037\111\052\054\070\041\071\042\074\071\075\064" +
    "\076\115\077\037\001\002\000\006\022\uff9a\033\024\001" +
    "\002\000\004\022\272\001\002\000\106\022\uffe9\024\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9" +
    "\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\053\uffe9\054" +
    "\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9" +
    "\065\uffe9\066\uffe9\067\uffe9\070\uffe9\072\uffe9\073\uffe9\001" +
    "\002\000\006\022\uff99\033\274\001\002\000\010\022\uffba" +
    "\033\uffba\074\uffba\001\002\000\106\022\uffed\024\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045" +
    "\uffed\046\uffed\047\uffed\050\uffed\051\uffed\053\uffed\054\uffed" +
    "\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065" +
    "\uffed\066\uffed\067\uffed\070\uffed\072\uffed\073\uffed\001\002" +
    "\000\040\020\053\021\045\027\277\031\065\032\051\033" +
    "\102\036\061\037\111\052\054\070\041\071\042\074\071" +
    "\075\064\076\115\077\037\001\002\000\040\020\053\021" +
    "\045\027\317\031\065\032\051\033\102\036\061\037\111" +
    "\052\054\070\041\071\042\074\071\075\064\076\115\077" +
    "\037\001\002\000\006\027\301\030\151\001\002\000\040" +
    "\020\053\021\045\027\302\031\065\032\051\033\102\036" +
    "\061\037\111\052\054\070\041\071\042\074\071\075\064" +
    "\076\115\077\037\001\002\000\040\020\053\021\045\022" +
    "\312\031\065\032\051\033\102\036\061\037\111\052\054" +
    "\070\041\071\042\074\071\075\064\076\115\077\037\001" +
    "\002\000\006\027\304\030\151\001\002\000\040\020\053" +
    "\021\045\022\305\031\065\032\051\033\102\036\061\037" +
    "\111\052\054\070\041\071\042\074\071\075\064\076\115" +
    "\077\037\001\002\000\056\011\066\013\106\014\050\015" +
    "\044\016\076\017\074\020\053\021\045\023\035\027\046" +
    "\031\065\032\051\033\102\036\061\037\111\052\054\070" +
    "\041\071\042\074\071\075\064\076\115\077\037\001\002" +
    "\000\006\022\307\030\151\001\002\000\056\011\066\013" +
    "\106\014\050\015\044\016\076\017\074\020\053\021\045" +
    "\023\035\027\046\031\065\032\051\033\102\036\061\037" +
    "\111\052\054\070\041\071\042\074\071\075\064\076\115" +
    "\077\037\001\002\000\062\011\uff73\012\uff73\013\uff73\014" +
    "\uff73\015\uff73\016\uff73\017\uff73\020\uff73\021\uff73\023\uff73" +
    "\024\uff73\027\uff73\031\uff73\032\uff73\033\uff73\036\uff73\037" +
    "\uff73\052\uff73\070\uff73\071\uff73\074\uff73\075\uff73\076\uff73" +
    "\077\uff73\001\002\000\062\011\uff74\012\uff74\013\uff74\014" +
    "\uff74\015\uff74\016\uff74\017\uff74\020\uff74\021\uff74\023\uff74" +
    "\024\uff74\027\uff74\031\uff74\032\uff74\033\uff74\036\uff74\037" +
    "\uff74\052\uff74\070\uff74\071\uff74\074\uff74\075\uff74\076\uff74" +
    "\077\uff74\001\002\000\056\011\066\013\106\014\050\015" +
    "\044\016\076\017\074\020\053\021\045\023\035\027\046" +
    "\031\065\032\051\033\102\036\061\037\111\052\054\070" +
    "\041\071\042\074\071\075\064\076\115\077\037\001\002" +
    "\000\006\022\314\030\151\001\002\000\056\011\066\013" +
    "\106\014\050\015\044\016\076\017\074\020\053\021\045" +
    "\023\035\027\046\031\065\032\051\033\102\036\061\037" +
    "\111\052\054\070\041\071\042\074\071\075\064\076\115" +
    "\077\037\001\002\000\062\011\uff75\012\uff75\013\uff75\014" +
    "\uff75\015\uff75\016\uff75\017\uff75\020\uff75\021\uff75\023\uff75" +
    "\024\uff75\027\uff75\031\uff75\032\uff75\033\uff75\036\uff75\037" +
    "\uff75\052\uff75\070\uff75\071\uff75\074\uff75\075\uff75\076\uff75" +
    "\077\uff75\001\002\000\062\011\uff76\012\uff76\013\uff76\014" +
    "\uff76\015\uff76\016\uff76\017\uff76\020\uff76\021\uff76\023\uff76" +
    "\024\uff76\027\uff76\031\uff76\032\uff76\033\uff76\036\uff76\037" +
    "\uff76\052\uff76\070\uff76\071\uff76\074\uff76\075\uff76\076\uff76" +
    "\077\uff76\001\002\000\040\020\053\021\045\022\327\031" +
    "\065\032\051\033\102\036\061\037\111\052\054\070\041" +
    "\071\042\074\071\075\064\076\115\077\037\001\002\000" +
    "\006\027\321\030\151\001\002\000\040\020\053\021\045" +
    "\022\322\031\065\032\051\033\102\036\061\037\111\052" +
    "\054\070\041\071\042\074\071\075\064\076\115\077\037" +
    "\001\002\000\056\011\066\013\106\014\050\015\044\016" +
    "\076\017\074\020\053\021\045\023\035\027\046\031\065" +
    "\032\051\033\102\036\061\037\111\052\054\070\041\071" +
    "\042\074\071\075\064\076\115\077\037\001\002\000\006" +
    "\022\324\030\151\001\002\000\056\011\066\013\106\014" +
    "\050\015\044\016\076\017\074\020\053\021\045\023\035" +
    "\027\046\031\065\032\051\033\102\036\061\037\111\052" +
    "\054\070\041\071\042\074\071\075\064\076\115\077\037" +
    "\001\002\000\062\011\uff77\012\uff77\013\uff77\014\uff77\015" +
    "\uff77\016\uff77\017\uff77\020\uff77\021\uff77\023\uff77\024\uff77" +
    "\027\uff77\031\uff77\032\uff77\033\uff77\036\uff77\037\uff77\052" +
    "\uff77\070\uff77\071\uff77\074\uff77\075\uff77\076\uff77\077\uff77" +
    "\001\002\000\062\011\uff78\012\uff78\013\uff78\014\uff78\015" +
    "\uff78\016\uff78\017\uff78\020\uff78\021\uff78\023\uff78\024\uff78" +
    "\027\uff78\031\uff78\032\uff78\033\uff78\036\uff78\037\uff78\052" +
    "\uff78\070\uff78\071\uff78\074\uff78\075\uff78\076\uff78\077\uff78" +
    "\001\002\000\056\011\066\013\106\014\050\015\044\016" +
    "\076\017\074\020\053\021\045\023\035\027\046\031\065" +
    "\032\051\033\102\036\061\037\111\052\054\070\041\071" +
    "\042\074\071\075\064\076\115\077\037\001\002\000\006" +
    "\022\331\030\151\001\002\000\056\011\066\013\106\014" +
    "\050\015\044\016\076\017\074\020\053\021\045\023\035" +
    "\027\046\031\065\032\051\033\102\036\061\037\111\052" +
    "\054\070\041\071\042\074\071\075\064\076\115\077\037" +
    "\001\002\000\062\011\uff79\012\uff79\013\uff79\014\uff79\015" +
    "\uff79\016\uff79\017\uff79\020\uff79\021\uff79\023\uff79\024\uff79" +
    "\027\uff79\031\uff79\032\uff79\033\uff79\036\uff79\037\uff79\052" +
    "\uff79\070\uff79\071\uff79\074\uff79\075\uff79\076\uff79\077\uff79" +
    "\001\002\000\062\011\uff7a\012\uff7a\013\uff7a\014\uff7a\015" +
    "\uff7a\016\uff7a\017\uff7a\020\uff7a\021\uff7a\023\uff7a\024\uff7a" +
    "\027\uff7a\031\uff7a\032\uff7a\033\uff7a\036\uff7a\037\uff7a\052" +
    "\uff7a\070\uff7a\071\uff7a\074\uff7a\075\uff7a\076\uff7a\077\uff7a" +
    "\001\002\000\004\022\335\001\002\000\036\020\053\021" +
    "\045\031\065\032\051\033\102\036\061\037\111\052\054" +
    "\070\041\071\042\074\071\075\064\076\115\077\037\001" +
    "\002\000\106\022\uffe7\024\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\050\uffe7\051\uffe7\053\uffe7\054\uffe7\057\uffe7\060\uffe7\061" +
    "\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7" +
    "\070\uffe7\072\uffe7\073\uffe7\001\002\000\062\011\uff7f\012" +
    "\uff7f\013\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f" +
    "\021\uff7f\023\uff7f\024\uff7f\027\uff7f\031\uff7f\032\uff7f\033" +
    "\uff7f\036\uff7f\037\uff7f\052\uff7f\070\uff7f\071\uff7f\074\uff7f" +
    "\075\uff7f\076\uff7f\077\uff7f\001\002\000\060\011\066\013" +
    "\106\014\050\015\044\016\076\017\074\020\053\021\045" +
    "\023\035\024\343\027\046\031\065\032\051\033\102\036" +
    "\061\037\111\052\054\070\041\071\042\074\071\075\064" +
    "\076\115\077\037\001\002\000\076\002\uff83\004\uff83\005" +
    "\uff83\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83\013\uff83" +
    "\014\uff83\015\uff83\016\uff83\017\uff83\020\uff83\021\uff83\023" +
    "\uff83\024\uff83\027\uff83\031\uff83\032\uff83\033\uff83\036\uff83" +
    "\037\uff83\052\uff83\070\uff83\071\uff83\074\uff83\075\uff83\076" +
    "\uff83\077\uff83\001\002\000\072\004\uffab\005\uffab\006\uffab" +
    "\007\uffab\010\uffab\011\uffab\013\uffab\014\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\023\uffab\024\uffab\027\uffab" +
    "\031\uffab\032\uffab\033\uffab\036\uffab\037\uffab\052\uffab\070" +
    "\uffab\071\uffab\074\uffab\075\uffab\076\uffab\077\uffab\001\002" +
    "\000\076\002\uff82\004\uff82\005\uff82\006\uff82\007\uff82\010" +
    "\uff82\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016\uff82" +
    "\017\uff82\020\uff82\021\uff82\023\uff82\024\uff82\027\uff82\031" +
    "\uff82\032\uff82\033\uff82\036\uff82\037\uff82\052\uff82\070\uff82" +
    "\071\uff82\074\uff82\075\uff82\076\uff82\077\uff82\001\002\000" +
    "\106\022\uffec\024\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\040\uffec\041\uffec\042" +
    "\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec" +
    "\051\uffec\053\uffec\054\uffec\057\uffec\060\uffec\061\uffec\062" +
    "\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\070\uffec" +
    "\072\uffec\073\uffec\001\002\000\106\022\ufff0\024\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045" +
    "\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\053\ufff0\054\ufff0" +
    "\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065" +
    "\ufff0\066\ufff0\067\ufff0\070\ufff0\072\ufff0\073\ufff0\001\002" +
    "\000\006\022\uff97\030\uff97\001\002\000\016\002\uff94\004" +
    "\uff94\005\uff94\006\uff94\007\uff94\010\uff94\001\002\000\010" +
    "\022\uffaf\025\351\030\uffaf\001\002\000\036\020\053\021" +
    "\045\031\065\032\051\033\102\036\061\037\111\052\054" +
    "\070\041\071\042\074\071\075\064\076\115\077\037\001" +
    "\002\000\006\026\uffbe\053\263\001\002\000\004\026\354" +
    "\001\002\000\014\022\uffb6\025\uffb6\027\uffb6\030\uffb6\065" +
    "\uffb6\001\002\000\006\033\024\074\016\001\002\000\074" +
    "\002\uffae\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011" +
    "\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\021\uffae\023\uffae\024\uffae\027\uffae\031\uffae\032\uffae\033" +
    "\uffae\036\uffae\037\uffae\052\uffae\070\uffae\071\uffae\074\uffae" +
    "\075\uffae\076\uffae\077\uffae\001\002\000\006\027\uffb0\030" +
    "\uffb0\001\002\000\040\020\053\021\045\023\362\031\065" +
    "\032\051\033\102\036\061\037\111\052\054\070\041\071" +
    "\042\074\071\075\064\076\115\077\037\001\002\000\010" +
    "\024\uffa7\027\uffa7\030\uffa7\001\002\000\040\020\053\021" +
    "\045\023\362\031\065\032\051\033\102\036\061\037\111" +
    "\052\054\070\041\071\042\074\071\075\064\076\115\077" +
    "\037\001\002\000\006\027\uffb2\030\uffb2\001\002\000\006" +
    "\024\367\030\366\001\002\000\006\024\uffa5\030\uffa5\001" +
    "\002\000\040\020\053\021\045\023\362\031\065\032\051" +
    "\033\102\036\061\037\111\052\054\070\041\071\042\074" +
    "\071\075\064\076\115\077\037\001\002\000\010\024\uffa6" +
    "\027\uffa6\030\uffa6\001\002\000\006\024\uffa4\030\uffa4\001" +
    "\002\000\016\021\uffb8\022\uffb8\025\uffb8\027\uffb8\030\uffb8" +
    "\065\uffb8\001\002\000\016\002\uff91\004\uff91\005\uff91\006" +
    "\uff91\007\uff91\010\uff91\001\002\000\004\002\001\001\002" +
    "\000\014\022\uff9e\023\u0108\027\uff9e\033\uff9e\074\uff9e\001" +
    "\002\000\014\004\010\005\015\006\004\007\007\010\005" +
    "\001\002\000\016\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010" +
    "\uffa9\024\uffa9\001\002\000\006\033\024\074\016\001\002" +
    "\000\016\004\010\005\015\006\004\007\007\010\005\024" +
    "\u0102\001\002\000\016\004\uffa8\005\uffa8\006\uffa8\007\uffa8" +
    "\010\uffa8\024\uffa8\001\002\000\012\022\uff9f\027\uff9f\033" +
    "\uff9f\074\uff9f\001\002\000\010\025\351\027\uffb5\030\uffb5" +
    "\001\002\000\006\027\u0106\030\u0105\001\002\000\006\033" +
    "\024\074\016\001\002\000\016\004\uffaa\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\024\uffaa\001\002\000\010\025\351\027" +
    "\uffb4\030\uffb4\001\002\000\014\004\010\005\015\006\004" +
    "\007\007\010\005\001\002\000\016\004\010\005\015\006" +
    "\004\007\007\010\005\024\u010a\001\002\000\012\022\uffa0" +
    "\027\uffa0\033\uffa0\074\uffa0\001\002\000\014\022\uff9b\023" +
    "\u010f\027\uff9b\033\uff9b\074\uff9b\001\002\000\014\004\010" +
    "\005\015\006\004\007\007\010\005\001\002\000\016\004" +
    "\010\005\015\006\004\007\007\010\005\024\u010e\001\002" +
    "\000\012\022\uff9c\027\uff9c\033\uff9c\074\uff9c\001\002\000" +
    "\014\004\010\005\015\006\004\007\007\010\005\001\002" +
    "\000\016\004\010\005\015\006\004\007\007\010\005\024" +
    "\u0111\001\002\000\012\022\uff9d\027\uff9d\033\uff9d\074\uff9d" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\014\002\010\003\005\011\013\021\011\023" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\371\011\013\021\011\023\012\001\001\000\014\004\016" +
    "\005\024\006\017\007\021\014\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\026\021\027\022\031\001\001\000" +
    "\002\001\001\000\010\004\016\005\215\006\347\001\001" +
    "\000\004\027\346\001\001\000\002\001\001\000\006\010" +
    "\345\021\027\001\001\000\004\027\035\001\001\000\066" +
    "\011\111\015\042\021\074\024\115\025\067\026\066\027" +
    "\062\030\046\031\061\032\112\033\071\034\104\035\077" +
    "\036\054\037\103\040\056\041\102\042\055\043\113\044" +
    "\100\045\037\046\107\047\057\050\072\051\076\052\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\047\344\050\122\051\076\052\051\001\001" +
    "\000\012\047\343\050\122\051\076\052\051\001\001\000" +
    "\064\011\341\021\074\024\115\025\337\026\066\027\062" +
    "\030\046\031\061\032\112\033\071\034\104\035\077\036" +
    "\054\037\103\040\056\041\102\042\055\043\113\044\100" +
    "\045\037\046\107\047\057\050\072\051\076\052\051\001" +
    "\001\000\002\001\001\000\046\021\267\033\147\034\104" +
    "\035\077\036\054\037\103\040\056\041\102\042\055\043" +
    "\113\044\100\045\037\046\107\047\057\050\072\051\076" +
    "\052\051\054\333\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\047\274\050\122\051\076" +
    "\052\051\001\001\000\002\001\001\000\010\050\265\051" +
    "\076\052\051\001\001\000\012\047\264\050\122\051\076" +
    "\052\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\050\261\051\076" +
    "\052\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\047\260\050\122\051\076\052\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\024" +
    "\251\026\066\027\062\030\046\031\061\032\112\033\071" +
    "\034\104\035\077\036\054\037\103\040\056\041\102\042" +
    "\055\043\113\044\100\045\037\046\107\047\057\050\072" +
    "\051\076\052\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\033\217\034\104\035\077" +
    "\036\054\037\103\040\056\041\102\042\055\043\113\044" +
    "\100\045\037\046\107\047\057\050\072\051\076\052\051" +
    "\001\001\000\014\004\016\005\215\006\017\007\021\014" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\047\171\050\122\051" +
    "\076\052\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\050\145\051\076\052\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\044\144\045\037" +
    "\046\107\047\057\050\122\051\076\052\051\001\001\000" +
    "\020\044\143\045\037\046\107\047\057\050\122\051\076" +
    "\052\051\001\001\000\020\044\142\045\037\046\107\047" +
    "\057\050\122\051\076\052\051\001\001\000\020\044\123" +
    "\045\037\046\107\047\057\050\122\051\076\052\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\045\141" +
    "\046\107\047\057\050\122\051\076\052\051\001\001\000" +
    "\016\045\126\046\107\047\057\050\122\051\076\052\051" +
    "\001\001\000\002\001\001\000\014\046\140\047\057\050" +
    "\122\051\076\052\051\001\001\000\014\046\131\047\057" +
    "\050\122\051\076\052\051\001\001\000\002\001\001\000" +
    "\012\047\137\050\122\051\076\052\051\001\001\000\012" +
    "\047\136\050\122\051\076\052\051\001\001\000\012\047" +
    "\135\050\122\051\076\052\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\033\147\034\104\035" +
    "\077\036\054\037\103\040\056\041\102\042\055\043\113" +
    "\044\100\045\037\046\107\047\057\050\072\051\076\052" +
    "\051\001\001\000\002\001\001\000\040\034\152\035\077" +
    "\036\054\037\103\040\056\041\102\042\055\043\113\044" +
    "\100\045\037\046\107\047\057\050\072\051\076\052\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\033" +
    "\154\034\104\035\077\036\054\037\103\040\056\041\102" +
    "\042\055\043\113\044\100\045\037\046\107\047\057\050" +
    "\072\051\076\052\051\001\001\000\002\001\001\000\056" +
    "\024\156\026\066\027\062\030\046\031\061\032\112\033" +
    "\071\034\104\035\077\036\054\037\103\040\056\041\102" +
    "\042\055\043\113\044\100\045\037\046\107\047\057\050" +
    "\072\051\076\052\051\001\001\000\002\001\001\000\030" +
    "\040\160\041\102\042\055\043\113\044\100\045\037\046" +
    "\107\047\057\050\122\051\076\052\051\001\001\000\002" +
    "\001\001\000\026\041\162\042\055\043\113\044\100\045" +
    "\037\046\107\047\057\050\122\051\076\052\051\001\001" +
    "\000\002\001\001\000\024\042\164\043\113\044\100\045" +
    "\037\046\107\047\057\050\122\051\076\052\051\001\001" +
    "\000\002\001\001\000\022\043\170\044\100\045\037\046" +
    "\107\047\057\050\122\051\076\052\051\001\001\000\022" +
    "\043\167\044\100\045\037\046\107\047\057\050\122\051" +
    "\076\052\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\037\173\040\056\041\102\042" +
    "\055\043\113\044\100\045\037\046\107\047\057\050\122" +
    "\051\076\052\051\001\001\000\002\001\001\000\042\033" +
    "\212\034\104\035\077\036\054\037\103\040\056\041\102" +
    "\042\055\043\113\044\100\045\037\046\107\047\057\050" +
    "\072\051\076\052\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\034\204\035\077\036" +
    "\054\037\103\040\056\041\102\042\055\043\113\044\100" +
    "\045\037\046\107\047\057\050\072\051\076\052\051\055" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\034" +
    "\210\035\077\036\054\037\103\040\056\041\102\042\055" +
    "\043\113\044\100\045\037\046\107\047\057\050\072\051" +
    "\076\052\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\034\246\035\077\036" +
    "\054\037\103\040\056\041\102\042\055\043\113\044\100" +
    "\045\037\046\107\047\057\050\072\051\076\052\051\001" +
    "\001\000\040\034\245\035\077\036\054\037\103\040\056" +
    "\041\102\042\055\043\113\044\100\045\037\046\107\047" +
    "\057\050\072\051\076\052\051\001\001\000\040\034\244" +
    "\035\077\036\054\037\103\040\056\041\102\042\055\043" +
    "\113\044\100\045\037\046\107\047\057\050\072\051\076" +
    "\052\051\001\001\000\040\034\243\035\077\036\054\037" +
    "\103\040\056\041\102\042\055\043\113\044\100\045\037" +
    "\046\107\047\057\050\072\051\076\052\051\001\001\000" +
    "\040\034\242\035\077\036\054\037\103\040\056\041\102" +
    "\042\055\043\113\044\100\045\037\046\107\047\057\050" +
    "\072\051\076\052\051\001\001\000\040\034\241\035\077" +
    "\036\054\037\103\040\056\041\102\042\055\043\113\044" +
    "\100\045\037\046\107\047\057\050\072\051\076\052\051" +
    "\001\001\000\040\034\240\035\077\036\054\037\103\040" +
    "\056\041\102\042\055\043\113\044\100\045\037\046\107" +
    "\047\057\050\072\051\076\052\051\001\001\000\040\034" +
    "\237\035\077\036\054\037\103\040\056\041\102\042\055" +
    "\043\113\044\100\045\037\046\107\047\057\050\072\051" +
    "\076\052\051\001\001\000\040\034\236\035\077\036\054" +
    "\037\103\040\056\041\102\042\055\043\113\044\100\045" +
    "\037\046\107\047\057\050\072\051\076\052\051\001\001" +
    "\000\040\034\235\035\077\036\054\037\103\040\056\041" +
    "\102\042\055\043\113\044\100\045\037\046\107\047\057" +
    "\050\072\051\076\052\051\001\001\000\040\034\234\035" +
    "\077\036\054\037\103\040\056\041\102\042\055\043\113" +
    "\044\100\045\037\046\107\047\057\050\072\051\076\052" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\033\253\034\104" +
    "\035\077\036\054\037\103\040\056\041\102\042\055\043" +
    "\113\044\100\045\037\046\107\047\057\050\072\051\076" +
    "\052\051\001\001\000\002\001\001\000\056\024\255\026" +
    "\066\027\062\030\046\031\061\032\112\033\071\034\104" +
    "\035\077\036\054\037\103\040\056\041\102\042\055\043" +
    "\113\044\100\045\037\046\107\047\057\050\072\051\076" +
    "\052\051\001\001\000\002\001\001\000\056\024\257\026" +
    "\066\027\062\030\046\031\061\032\112\033\071\034\104" +
    "\035\077\036\054\037\103\040\056\041\102\042\055\043" +
    "\113\044\100\045\037\046\107\047\057\050\072\051\076" +
    "\052\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\035\263\037\103\040\056\041\102" +
    "\042\055\043\113\044\100\045\037\046\107\047\057\050" +
    "\122\051\076\052\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\021\267\033\147\034" +
    "\104\035\077\036\054\037\103\040\056\041\102\042\055" +
    "\043\113\044\100\045\037\046\107\047\057\050\072\051" +
    "\076\052\051\054\270\001\001\000\004\004\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\033\277\034\104" +
    "\035\077\036\054\037\103\040\056\041\102\042\055\043" +
    "\113\044\100\045\037\046\107\047\057\050\072\051\076" +
    "\052\051\001\001\000\042\033\317\034\104\035\077\036" +
    "\054\037\103\040\056\041\102\042\055\043\113\044\100" +
    "\045\037\046\107\047\057\050\072\051\076\052\051\001" +
    "\001\000\002\001\001\000\042\033\302\034\104\035\077" +
    "\036\054\037\103\040\056\041\102\042\055\043\113\044" +
    "\100\045\037\046\107\047\057\050\072\051\076\052\051" +
    "\001\001\000\042\033\312\034\104\035\077\036\054\037" +
    "\103\040\056\041\102\042\055\043\113\044\100\045\037" +
    "\046\107\047\057\050\072\051\076\052\051\001\001\000" +
    "\002\001\001\000\042\033\305\034\104\035\077\036\054" +
    "\037\103\040\056\041\102\042\055\043\113\044\100\045" +
    "\037\046\107\047\057\050\072\051\076\052\051\001\001" +
    "\000\056\024\310\026\066\027\062\030\046\031\061\032" +
    "\112\033\071\034\104\035\077\036\054\037\103\040\056" +
    "\041\102\042\055\043\113\044\100\045\037\046\107\047" +
    "\057\050\072\051\076\052\051\001\001\000\002\001\001" +
    "\000\056\024\307\026\066\027\062\030\046\031\061\032" +
    "\112\033\071\034\104\035\077\036\054\037\103\040\056" +
    "\041\102\042\055\043\113\044\100\045\037\046\107\047" +
    "\057\050\072\051\076\052\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\024\315\026\066\027\062\030" +
    "\046\031\061\032\112\033\071\034\104\035\077\036\054" +
    "\037\103\040\056\041\102\042\055\043\113\044\100\045" +
    "\037\046\107\047\057\050\072\051\076\052\051\001\001" +
    "\000\002\001\001\000\056\024\314\026\066\027\062\030" +
    "\046\031\061\032\112\033\071\034\104\035\077\036\054" +
    "\037\103\040\056\041\102\042\055\043\113\044\100\045" +
    "\037\046\107\047\057\050\072\051\076\052\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\033\327\034" +
    "\104\035\077\036\054\037\103\040\056\041\102\042\055" +
    "\043\113\044\100\045\037\046\107\047\057\050\072\051" +
    "\076\052\051\001\001\000\002\001\001\000\042\033\322" +
    "\034\104\035\077\036\054\037\103\040\056\041\102\042" +
    "\055\043\113\044\100\045\037\046\107\047\057\050\072" +
    "\051\076\052\051\001\001\000\056\024\325\026\066\027" +
    "\062\030\046\031\061\032\112\033\071\034\104\035\077" +
    "\036\054\037\103\040\056\041\102\042\055\043\113\044" +
    "\100\045\037\046\107\047\057\050\072\051\076\052\051" +
    "\001\001\000\002\001\001\000\056\024\324\026\066\027" +
    "\062\030\046\031\061\032\112\033\071\034\104\035\077" +
    "\036\054\037\103\040\056\041\102\042\055\043\113\044" +
    "\100\045\037\046\107\047\057\050\072\051\076\052\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\024" +
    "\332\026\066\027\062\030\046\031\061\032\112\033\071" +
    "\034\104\035\077\036\054\037\103\040\056\041\102\042" +
    "\055\043\113\044\100\045\037\046\107\047\057\050\072" +
    "\051\076\052\051\001\001\000\002\001\001\000\056\024" +
    "\331\026\066\027\062\030\046\031\061\032\112\033\071" +
    "\034\104\035\077\036\054\037\103\040\056\041\102\042" +
    "\055\043\113\044\100\045\037\046\107\047\057\050\072" +
    "\051\076\052\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\047\335\050\122\051\076" +
    "\052\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\024\251\026\066\027\062\030\046\031\061\032\112" +
    "\033\071\034\104\035\077\036\054\037\103\040\056\041" +
    "\102\042\055\043\113\044\100\045\037\046\107\047\057" +
    "\050\072\051\076\052\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\035\077\036\351\037\103\040\056\041\102" +
    "\042\055\043\113\044\100\045\037\046\107\047\057\050" +
    "\122\051\076\052\051\053\352\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\016\005" +
    "\215\006\017\007\356\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\017\362\034\360\035\077\036\054\037" +
    "\103\040\056\041\102\042\055\043\113\044\100\045\037" +
    "\046\107\047\057\050\072\051\076\052\051\001\001\000" +
    "\002\001\001\000\044\017\364\020\363\034\360\035\077" +
    "\036\054\037\103\040\056\041\102\042\055\043\113\044" +
    "\100\045\037\046\107\047\057\050\072\051\076\052\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\017\367\034\360\035\077\036\054\037\103" +
    "\040\056\041\102\042\055\043\113\044\100\045\037\046" +
    "\107\047\057\050\072\051\076\052\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\375" +
    "\016\377\021\376\001\001\000\002\001\001\000\012\004" +
    "\016\005\215\006\u0102\013\u0103\001\001\000\006\012\u0100" +
    "\021\376\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\016\005\215" +
    "\006\u0106\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\375\016\u0108\021\376\001\001\000\006\012\u0100" +
    "\021\376\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\375\016\u010c\021\376\001\001\000\006\012\u0100" +
    "\021\376\001\001\000\002\001\001\000\010\012\375\016" +
    "\u010f\021\376\001\001\000\006\012\u0100\021\376\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void report_error(String msg, Object info)
{
	StringBuffer m = new StringBuffer("\tParsing Error!");
	if(info instanceof java_cup.runtime.Symbol)
	{
		java_cup.runtime.Symbol s= (java_cup.runtime.Symbol)info;
		if(s.left>=0)
		{
			m.append(" in line " + (s.left +1 ));
			if (s.right >= 0)
			{
				m.append(", column " + (s.right + 1));
				if(s.value!=null)
					m.append(": "+s.value);
			}
		}
	}
	m.append(" : " + msg);
	System.err.println(m);
	System.exit(1);
}

public Parser(InputStream in)
{
	this(new Lexer(new InputStreamReader(in))); 
}

public Parser(Reader in)
{
	this(new Lexer(in));
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // primary_expression ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimaryExpr(PrimaryExpr.Type.ID, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // primary_expression ::= STRINGCONTENT 
            {
              Expr RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimaryExpr(PrimaryExpr.Type.STRING, str); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // primary_expression ::= LPAREN expression RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // primary_expression ::= NUM 
            {
              Expr RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimaryExpr(PrimaryExpr.Type.INT, num); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // primary_expression ::= CHARCONTENT 
            {
              Expr RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimaryExpr(PrimaryExpr.Type.CHAR, ch); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // postfix_expression ::= primary_expression 
            {
              Expr RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr pe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pe; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // postfix_expression ::= postfix_expression LMPAREN expression RMPAREN 
            {
              Expr RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr pe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PostfixExpr(PostfixExpr.Type.MPAREN, index, pe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // postfix_expression ::= postfix_expression LPAREN RPAREN 
            {
              Expr RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr pe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new PostfixExpr(PostfixExpr.Type.PAREN, null, pe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // postfix_expression ::= postfix_expression LPAREN arguments RPAREN 
            {
              Expr RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr pe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Arguments arg = (Arguments)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PostfixExpr(PostfixExpr.Type.PAREN, arg, pe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // postfix_expression ::= postfix_expression DOT ID 
            {
              Expr RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr pe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PostfixExpr(PostfixExpr.Type.DOT, id, pe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // postfix_expression ::= postfix_expression PTR ID 
            {
              Expr RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr pe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PostfixExpr(PostfixExpr.Type.PTR, id, pe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // postfix_expression ::= postfix_expression INC 
            {
              Expr RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr pe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PostfixExpr(PostfixExpr.Type.INC, null, pe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // postfix_expression ::= postfix_expression DEC 
            {
              Expr RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr pe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PostfixExpr(PostfixExpr.Type.DEC, null, pe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // unary_expression ::= postfix_expression 
            {
              Expr RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr pe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pe; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // unary_expression ::= INC unary_expression 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.Type.INC, ue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // unary_expression ::= DEC unary_expression 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.Type.DEC, ue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // unary_expression ::= BIT_AND cast_expression 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.Type.BIT_AND, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // unary_expression ::= TIMES cast_expression 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.Type.STAR, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unary_expression ::= PLUS cast_expression 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.Type.POSITIVE, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // unary_expression ::= MINUS cast_expression 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.Type.NEGATIVE, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // unary_expression ::= BIT_NOT cast_expression 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.Type.BIT_NOT, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // unary_expression ::= NOT cast_expression 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.Type.NOT, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // unary_expression ::= SIZEOF unary_expression 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.Type.SIZEOF, ue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // unary_expression ::= SIZEOF LPAREN type_name RPAREN 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeName t = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new UnaryExpr(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cast_expression ::= unary_expression 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ue; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cast_expression ::= LPAREN type_name RPAREN cast_expression 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeName t = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CastExpr(t, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // multiplicative_expression ::= cast_expression 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ce; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // multiplicative_expression ::= multiplicative_expression TIMES cast_expression 
            {
              Expr RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr me = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Type.TIMES, me, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // multiplicative_expression ::= multiplicative_expression DIVIDE cast_expression 
            {
              Expr RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr me = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Type.DIVIDE, me, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // multiplicative_expression ::= multiplicative_expression MODULE cast_expression 
            {
              Expr RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr me = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Type.MODULE, me, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // additive_expression ::= multiplicative_expression 
            {
              Expr RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr me = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = me; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              Expr RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr me = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Type.PLUS, ae, me); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              Expr RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr me = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Type.MINUS, ae, me); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // shift_expression ::= additive_expression 
            {
              Expr RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ae; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // shift_expression ::= shift_expression SHL additive_expression 
            {
              Expr RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Type.SHL, se, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // shift_expression ::= shift_expression SHR additive_expression 
            {
              Expr RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Type.SHR, se, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // relational_expression ::= shift_expression 
            {
              Expr RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = se; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // relational_expression ::= relational_expression LT shift_expression 
            {
              Expr RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Type.LT, re, se); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // relational_expression ::= relational_expression GT shift_expression 
            {
              Expr RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Type.GT, re, se); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // relational_expression ::= relational_expression LE shift_expression 
            {
              Expr RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Type.LE, re, se); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // relational_expression ::= relational_expression GE shift_expression 
            {
              Expr RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Type.GE, re, se); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // equality_expression ::= relational_expression 
            {
              Expr RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = re; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // equality_expression ::= equality_expression EQ relational_expression 
            {
              Expr RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ee = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Type.EQ, ee, re); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // equality_expression ::= equality_expression NE relational_expression 
            {
              Expr RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ee = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Type.NE, ee, re); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // and_expression ::= equality_expression 
            {
              Expr RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ee = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ee; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // and_expression ::= and_expression BIT_AND equality_expression 
            {
              Expr RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ee = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Type.BIT_AND, ae, ee); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exclusive_or_expression ::= and_expression 
            {
              Expr RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ae; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exclusive_or_expression ::= exclusive_or_expression BIT_XOR and_expression 
            {
              Expr RESULT =null;
		int eoeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eoeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr eoe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Type.BIT_XOR, eoe, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // inclusive_or_expression ::= exclusive_or_expression 
            {
              Expr RESULT =null;
		int eoeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eoeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr eoe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = eoe; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // inclusive_or_expression ::= inclusive_or_expression BIT_OR exclusive_or_expression 
            {
              Expr RESULT =null;
		int ioeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ioeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ioe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eoeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eoeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr eoe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Type.BIT_OR, ioe, eoe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // logical_and_expression ::= inclusive_or_expression 
            {
              Expr RESULT =null;
		int ioeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ioeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ioe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ioe; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // logical_and_expression ::= logical_and_expression AND inclusive_or_expression 
            {
              Expr RESULT =null;
		int laeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int laeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr lae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ioeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ioeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ioe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Type.AND, lae, ioe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logical_or_expression ::= logical_and_expression 
            {
              Expr RESULT =null;
		int laeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int laeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr lae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lae; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logical_or_expression ::= logical_or_expression OR logical_and_expression 
            {
              Expr RESULT =null;
		int loeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int loeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr loe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int laeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int laeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr lae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Type.OR, loe, lae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assignment_expression ::= logical_or_expression 
            {
              Expr RESULT =null;
		int loeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int loeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr loe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = loe; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // assignment_expression ::= unary_expression ASSIGN assignment_expression 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentExpr(AssignmentExpr.Type.ASSIGN, ue, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // assignment_expression ::= unary_expression MUL_ASSIGN assignment_expression 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentExpr(AssignmentExpr.Type.MUL_ASSIGN, ue, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assignment_expression ::= unary_expression DIV_ASSIGN assignment_expression 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentExpr(AssignmentExpr.Type.DIV_ASSIGN, ue, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assignment_expression ::= unary_expression MOD_ASSIGN assignment_expression 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentExpr(AssignmentExpr.Type.MOD_ASSIGN, ue, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // assignment_expression ::= unary_expression ADD_ASSIGN assignment_expression 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentExpr(AssignmentExpr.Type.ADD_ASSIGN, ue, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assignment_expression ::= unary_expression SUB_ASSIGN assignment_expression 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentExpr(AssignmentExpr.Type.SUB_ASSIGN, ue, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assignment_expression ::= unary_expression SHL_ASSIGN assignment_expression 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentExpr(AssignmentExpr.Type.SHL_ASSIGN, ue, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // assignment_expression ::= unary_expression SHR_ASSIGN assignment_expression 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentExpr(AssignmentExpr.Type.SHR_ASSIGN, ue, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // assignment_expression ::= unary_expression AND_ASSIGN assignment_expression 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentExpr(AssignmentExpr.Type.AND_ASSIGN, ue, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // assignment_expression ::= unary_expression XOR_ASSIGN assignment_expression 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentExpr(AssignmentExpr.Type.XOR_ASSIGN, ue, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // assignment_expression ::= unary_expression OR_ASSIGN assignment_expression 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentExpr(AssignmentExpr.Type.OR_ASSIGN, ue, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // constant_expression ::= logical_or_expression 
            {
              Expr RESULT =null;
		int loeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int loeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr loe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = loe; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= assignment_expression 
            {
              Expression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expression(ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= expression COMMA assignment_expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.comp.add(ae); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stars ::= TIMES 
            {
              Star RESULT =null;
		 RESULT = new Star(1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stars",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stars ::= stars TIMES 
            {
              Star RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Star ss = (Star)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 ++ss.cnt; RESULT = ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stars",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // plain_declarator ::= ID 
            {
              PlainDeclarator RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlainDeclarator(null, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declarator",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // plain_declarator ::= stars ID 
            {
              PlainDeclarator RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Star ss = (Star)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlainDeclarator(ss, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declarator",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declarator ::= plain_declarator 
            {
              Declarator RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlainDeclarator pd = (PlainDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declarator(pd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declarator ::= declarator LMPAREN constant_expression RMPAREN 
            {
              Declarator RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Declarator d = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 d.dimension.add(ce); RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declarators ::= declarator 
            {
              Declarators RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declarator d = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declarators(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarators",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declarators ::= declarators COMMA declarator 
            {
              Declarators RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Declarators ds = (Declarators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declarator d = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ds.comp.add(d); RESULT = ds; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarators",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // init_declarator ::= declarator 
            {
              InitDeclarator RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declarator d = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDeclarator(d, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // init_declarator ::= declarator ASSIGN initializer 
            {
              InitDeclarator RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Declarator d = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initializer i = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDeclarator(d, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // init_declarators ::= init_declarator 
            {
              InitDeclarators RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitDeclarator id = (InitDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDeclarators(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarators",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // init_declarators ::= init_declarators COMMA init_declarator 
            {
              InitDeclarators RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InitDeclarators ids = (InitDeclarators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitDeclarator id = (InitDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ids.comp.add(id); RESULT = ids; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarators",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // plain_decl ::= type_specifier declarator 
            {
              PlainDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declarator d = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlainDecl(t, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // decl ::= type_specifier init_declarators SEMI 
            {
              Decl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InitDeclarators id = (InitDeclarators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Decl(t, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // decl ::= type_specifier SEMI 
            {
              Decl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Decl(t, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // decls ::= decl 
            {
              Decls RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Decls(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // decls ::= decls decl 
            {
              Decls RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decls ds = (Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ds.comp.add(d); RESULT = ds; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // non_init_decl ::= type_specifier declarators SEMI 
            {
              NonInitDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Declarators ds = (Declarators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NonInitDecl(t, ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_init_decl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // non_init_decls ::= non_init_decl 
            {
              NonInitDecls RESULT =null;
		int nidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NonInitDecl nid = (NonInitDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NonInitDecls(nid); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_init_decls",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // non_init_decls ::= non_init_decls non_init_decl 
            {
              NonInitDecls RESULT =null;
		int nidsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nidsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NonInitDecls nids = (NonInitDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NonInitDecl nid = (NonInitDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 nids.comp.add(nid); RESULT=nids; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_init_decls",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // initializer ::= assignment_expression 
            {
              Initializer RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Initializer(ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // initializer ::= LBRACE initializers RBRACE 
            {
              Initializer RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Initializers is = (Initializers)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Initializer(is); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // initializers ::= initializer 
            {
              Initializers RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initializer i = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Initializers(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializers",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // initializers ::= initializers COMMA initializer 
            {
              Initializers RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Initializers is = (Initializers)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initializer i = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 is.comp.add(i); RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializers",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // type_specifier ::= VOID 
            {
              TypeSpecifier RESULT =null;
		 RESULT = new TypeSpecifier(TypeSpecifier.Type.VOID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // type_specifier ::= CHAR 
            {
              TypeSpecifier RESULT =null;
		 RESULT = new TypeSpecifier(TypeSpecifier.Type.CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // type_specifier ::= INT 
            {
              TypeSpecifier RESULT =null;
		 RESULT = new TypeSpecifier(TypeSpecifier.Type.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // type_specifier ::= STRUCT ID LBRACE non_init_decls RBRACE 
            {
              TypeSpecifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nidsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nidsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NonInitDecls nids = (NonInitDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeSpecifier(TypeSpecifier.Type.STRUCT, id, nids); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // type_specifier ::= STRUCT LBRACE non_init_decls RBRACE 
            {
              TypeSpecifier RESULT =null;
		int nidsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nidsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NonInitDecls nids = (NonInitDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeSpecifier(TypeSpecifier.Type.STRUCT, null, nids); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // type_specifier ::= STRUCT ID 
            {
              TypeSpecifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeSpecifier(TypeSpecifier.Type.STRUCT, id, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // type_specifier ::= UNION ID LBRACE non_init_decls RBRACE 
            {
              TypeSpecifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nidsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nidsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NonInitDecls nids = (NonInitDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeSpecifier(TypeSpecifier.Type.UNION, id, nids); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // type_specifier ::= UNION LBRACE non_init_decls RBRACE 
            {
              TypeSpecifier RESULT =null;
		int nidsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nidsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NonInitDecls nids = (NonInitDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeSpecifier(TypeSpecifier.Type.UNION, null, nids); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // type_specifier ::= UNION ID 
            {
              TypeSpecifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeSpecifier(TypeSpecifier.Type.UNION, id, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // type_name ::= type_specifier 
            {
              TypeName RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeSpecifier ts = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeName(ts, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_name",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // type_name ::= type_specifier stars 
            {
              TypeName RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeSpecifier ts = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Star ss = (Star)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeName(ts, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_name",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parameters ::= plain_decl 
            {
              Parameters RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlainDecl pd = (PlainDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parameters(pd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parameters ::= parameters COMMA plain_decl 
            {
              Parameters RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Parameters p = (Parameters)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlainDecl pd = (PlainDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 p.comp.add(pd); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // arguments ::= assignment_expression 
            {
              Arguments RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arguments(ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // arguments ::= arguments COMMA assignment_expression 
            {
              Arguments RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 args.comp.add(ae); RESULT = args; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // func_def ::= type_specifier plain_declarator LPAREN RPAREN compound_stmt 
            {
              FuncDef RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PlainDeclarator pd = (PlainDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompoundStmt cs = (CompoundStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FuncDef(t, pd, null, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_def",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // func_def ::= type_specifier plain_declarator LPAREN parameters RPAREN compound_stmt 
            {
              FuncDef RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		PlainDeclarator pd = (PlainDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Parameters p = (Parameters)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompoundStmt cs = (CompoundStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FuncDef(t, pd, p, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_def",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // program ::= general_decl 
            {
              Program RESULT =null;
		int gdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		GeneralDeclaration gd = (GeneralDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(gd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // program ::= program general_decl 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int gdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		GeneralDeclaration gd = (GeneralDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 p.comp.add(gd); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // general_decl ::= decl 
            {
              GeneralDeclaration RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("general_decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // general_decl ::= func_def 
            {
              GeneralDeclaration RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncDef fd = (FuncDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("general_decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // stmt ::= expression_stmt 
            {
              Stmt RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionStmt es = (ExpressionStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // stmt ::= compound_stmt 
            {
              Stmt RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompoundStmt cs = (CompoundStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // stmt ::= selection_stmt 
            {
              Stmt RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SelectionStmt ss = (SelectionStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // stmt ::= iteration_stmt 
            {
              Stmt RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IterationStmt is = (IterationStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // stmt ::= jump_stmt 
            {
              Stmt RESULT =null;
		int jsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JumpStmt js = (JumpStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = js; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // stmts ::= stmt 
            {
              Stmts RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Stmts(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // stmts ::= stmts stmt 
            {
              Stmts RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmts ss = (Stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ss.comp.add(s); RESULT = ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression_stmt ::= SEMI 
            {
              ExpressionStmt RESULT =null;
		 RESULT = new ExpressionStmt(null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression_stmt ::= expression SEMI 
            {
              ExpressionStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpressionStmt(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // compound_stmt ::= LBRACE RBRACE 
            {
              CompoundStmt RESULT =null;
		 RESULT = new CompoundStmt(null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // compound_stmt ::= LBRACE stmts RBRACE 
            {
              CompoundStmt RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmts ss = (Stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CompoundStmt(null, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // compound_stmt ::= LBRACE decls RBRACE 
            {
              CompoundStmt RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decls ds = (Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CompoundStmt(ds, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // compound_stmt ::= LBRACE decls stmts RBRACE 
            {
              CompoundStmt RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Decls ds = (Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmts ss = (Stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CompoundStmt(ds, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // selection_stmt ::= IF LPAREN expression RPAREN stmt ELSE stmt 
            {
              SelectionStmt RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt st1 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt st2 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SelectionStmt(cond, st1, st2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // selection_stmt ::= IF LPAREN expression RPAREN stmt 
            {
              SelectionStmt RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SelectionStmt(cond, st, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // jump_stmt ::= CONTINUE SEMI 
            {
              JumpStmt RESULT =null;
		 RESULT = new JumpStmt(JumpStmt.Type.CONTINUE, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // jump_stmt ::= BREAK SEMI 
            {
              JumpStmt RESULT =null;
		 RESULT = new JumpStmt(JumpStmt.Type.BREAK, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // jump_stmt ::= RETURN SEMI 
            {
              JumpStmt RESULT =null;
		 RESULT = new JumpStmt(JumpStmt.Type.RETURN, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // jump_stmt ::= RETURN expression SEMI 
            {
              JumpStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new JumpStmt(JumpStmt.Type.RETURN, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // iteration_stmt ::= WHILE LPAREN expression RPAREN stmt 
            {
              IterationStmt RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IterationStmt(cond, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // iteration_stmt ::= FOR LPAREN SEMI SEMI RPAREN stmt 
            {
              IterationStmt RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IterationStmt(null, null, null, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // iteration_stmt ::= FOR LPAREN SEMI SEMI expression RPAREN stmt 
            {
              IterationStmt RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IterationStmt(null, null, e3, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // iteration_stmt ::= FOR LPAREN SEMI expression SEMI RPAREN stmt 
            {
              IterationStmt RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IterationStmt(null, e2, null, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // iteration_stmt ::= FOR LPAREN SEMI expression SEMI expression RPAREN stmt 
            {
              IterationStmt RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IterationStmt(null, e2, e3, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // iteration_stmt ::= FOR LPAREN expression SEMI SEMI RPAREN stmt 
            {
              IterationStmt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IterationStmt(e1, null, null, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // iteration_stmt ::= FOR LPAREN expression SEMI SEMI expression RPAREN stmt 
            {
              IterationStmt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IterationStmt(e1, null, e3, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // iteration_stmt ::= FOR LPAREN expression SEMI expression SEMI RPAREN stmt 
            {
              IterationStmt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IterationStmt(e1, e2, null, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // iteration_stmt ::= FOR LPAREN expression SEMI expression SEMI expression RPAREN stmt 
            {
              IterationStmt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IterationStmt(e1, e2, e3, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
