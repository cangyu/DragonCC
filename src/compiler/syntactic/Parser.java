
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.syntactic;

import java.io.InputStream;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\212\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\005" +
    "\000\002\004\004\000\002\005\010\000\002\005\007\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\007\000\002\006\006\000\002\006\004\000\002\006" +
    "\007\000\002\006\006\000\002\006\004\000\002\007\005" +
    "\000\002\007\003\000\002\010\005\000\002\010\003\000" +
    "\002\011\003\000\002\011\006\000\002\012\003\000\002" +
    "\012\005\000\002\013\003\000\002\013\005\000\002\016" +
    "\004\000\002\015\002\000\002\015\004\000\002\017\003" +
    "\000\002\017\005\000\002\020\005\000\002\020\006\000" +
    "\002\021\003\000\002\021\005\000\002\014\004\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\024\004\000\002\025\006" +
    "\000\002\022\004\000\002\022\002\000\002\026\004\000" +
    "\002\026\002\000\002\027\011\000\002\027\007\000\002" +
    "\031\007\000\002\031\013\000\002\030\004\000\002\030" +
    "\004\000\002\030\005\000\002\033\002\000\002\033\003" +
    "\000\002\032\003\000\002\032\005\000\002\036\003\000" +
    "\002\034\003\000\002\034\005\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\040\003\000\002\040\005\000\002\037\003\000\002" +
    "\037\005\000\002\041\003\000\002\041\005\000\002\042" +
    "\003\000\002\042\005\000\002\043\003\000\002\043\005" +
    "\000\002\044\003\000\002\044\005\000\002\045\003\000" +
    "\002\045\003\000\002\046\003\000\002\046\005\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\050\003\000\002\050\005\000\002\051\003" +
    "\000\002\051\003\000\002\052\003\000\002\052\005\000" +
    "\002\053\003\000\002\053\003\000\002\054\003\000\002" +
    "\054\005\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\056\003\000\002\056\006\000\002\057\004" +
    "\000\002\060\003\000\002\060\004\000\002\060\004\000" +
    "\002\060\004\000\002\060\004\000\002\060\006\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\062\003" +
    "\000\002\062\006\000\002\062\006\000\002\062\005\000" +
    "\002\062\005\000\002\062\004\000\002\062\004\000\002" +
    "\064\002\000\002\064\003\000\002\063\003\000\002\063" +
    "\005\000\002\065\003\000\002\065\003\000\002\065\005" +
    "\000\002\065\003\000\002\065\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\014\004\010\005\015\006\004\007\007\010" +
    "\006\001\002\000\012\022\ufff6\027\ufff6\033\ufff6\074\ufff6" +
    "\001\002\000\016\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007" +
    "\ufffe\010\ufffe\001\002\000\006\023\337\074\336\001\002" +
    "\000\006\023\317\074\316\001\002\000\012\022\ufff8\027" +
    "\ufff8\033\ufff8\074\ufff8\001\002\000\016\002\314\004\010" +
    "\005\015\006\004\007\007\010\006\001\002\000\016\002" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\001\002" +
    "\000\010\027\020\033\023\074\uffe4\001\002\000\016\002" +
    "\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\001\002" +
    "\000\012\022\ufff7\027\ufff7\033\ufff7\074\ufff7\001\002\000" +
    "\004\074\313\001\002\000\012\025\272\027\uffec\030\uffec" +
    "\065\302\001\002\000\072\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\020\ufffb\021\ufffb\023\ufffb\024\ufffb\031" +
    "\ufffb\032\ufffb\033\ufffb\036\ufffb\037\ufffb\052\ufffb\070\ufffb" +
    "\071\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb\001\002\000" +
    "\006\027\uffee\030\uffee\001\002\000\006\027\300\030\277" +
    "\001\002\000\010\022\uffe4\033\023\074\uffe4\001\002\000" +
    "\014\021\025\025\uffeb\027\uffeb\030\uffeb\065\uffeb\001\002" +
    "\000\016\004\010\005\015\006\004\007\007\010\006\022" +
    "\030\001\002\000\006\022\uffe2\030\uffe2\001\002\000\006" +
    "\033\023\074\uffe4\001\002\000\004\023\034\001\002\000" +
    "\006\022\033\030\032\001\002\000\014\004\010\005\015" +
    "\006\004\007\007\010\006\001\002\000\004\023\034\001" +
    "\002\000\070\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\023\uffd3\024\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\036\uffd3\037\uffd3\052\uffd3\070\uffd3\071\uffd3\074\uffd3\075" +
    "\uffd3\076\uffd3\077\uffd3\001\002\000\016\002\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\001\002\000\070\004" +
    "\010\005\015\006\004\007\007\010\006\011\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\023" +
    "\uffd1\024\uffd1\031\uffd1\032\uffd1\033\uffd1\036\uffd1\037\uffd1" +
    "\052\uffd1\070\uffd1\071\uffd1\074\uffd1\075\uffd1\076\uffd1\077" +
    "\uffd1\001\002\000\010\027\020\033\023\074\uffe4\001\002" +
    "\000\056\011\067\013\105\014\051\015\047\016\076\017" +
    "\074\020\055\021\046\023\034\024\106\031\066\032\052" +
    "\033\102\036\063\037\110\052\054\070\045\071\044\074" +
    "\071\075\065\076\114\077\042\001\002\000\070\004\uffd4" +
    "\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\023\uffd4" +
    "\024\uffd4\031\uffd4\032\uffd4\033\uffd4\036\uffd4\037\uffd4\052" +
    "\uffd4\070\uffd4\071\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4" +
    "\001\002\000\122\021\uff78\022\uff78\024\uff78\025\uff78\026" +
    "\uff78\027\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034\uff78" +
    "\035\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78\043" +
    "\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050\uff78\051\uff78" +
    "\053\uff78\054\uff78\055\uff78\056\uff78\057\uff78\060\uff78\061" +
    "\uff78\062\uff78\063\uff78\064\uff78\065\uff78\066\uff78\067\uff78" +
    "\070\uff78\072\uff78\073\uff78\001\002\000\052\022\uffa3\024" +
    "\uffa3\026\uffa3\027\uffa3\030\uffa3\031\132\032\133\053\uffa3" +
    "\054\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064" +
    "\uffa3\066\uffa3\067\uffa3\070\uffa3\072\uffa3\073\uffa3\001\002" +
    "\000\036\020\uff89\021\uff89\031\uff89\032\uff89\033\uff89\036" +
    "\uff89\037\uff89\052\uff89\070\uff89\071\uff89\074\uff89\075\uff89" +
    "\076\uff89\077\uff89\001\002\000\036\020\uff8d\021\uff8d\031" +
    "\uff8d\032\uff8d\033\uff8d\036\uff8d\037\uff8d\052\uff8d\070\uff8d" +
    "\071\uff8d\074\uff8d\075\uff8d\076\uff8d\077\uff8d\001\002\000" +
    "\050\004\010\005\015\006\004\007\007\010\006\020\055" +
    "\021\046\031\066\032\052\033\102\036\063\037\110\052" +
    "\054\070\045\071\044\074\071\075\065\076\114\077\042" +
    "\001\002\000\004\027\262\001\002\000\060\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\023\uffd9\024\uffd9\031\uffd9\032\uffd9\033\uffd9\036" +
    "\uffd9\037\uffd9\052\uffd9\070\uffd9\071\uffd9\074\uffd9\075\uffd9" +
    "\076\uffd9\077\uffd9\001\002\000\004\021\252\001\002\000" +
    "\036\020\uff8a\021\uff8a\031\uff8a\032\uff8a\033\uff8a\036\uff8a" +
    "\037\uff8a\052\uff8a\070\uff8a\071\uff8a\074\uff8a\075\uff8a\076" +
    "\uff8a\077\uff8a\001\002\000\122\021\uff87\022\uff87\024\uff87" +
    "\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033" +
    "\uff87\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87" +
    "\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050" +
    "\uff87\051\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057\uff87" +
    "\060\uff87\061\uff87\062\uff87\063\uff87\064\uff87\065\uff87\066" +
    "\uff87\067\uff87\070\uff87\072\uff87\073\uff87\001\002\000\036" +
    "\020\uff88\021\uff88\031\uff88\032\uff88\033\uff88\036\uff88\037" +
    "\uff88\052\uff88\070\uff88\071\uff88\074\uff88\075\uff88\076\uff88" +
    "\077\uff88\001\002\000\036\020\055\021\245\031\066\032" +
    "\052\033\102\036\063\037\110\052\054\070\045\071\044" +
    "\074\071\075\065\076\114\077\042\001\002\000\014\022" +
    "\uffc4\024\uffc4\026\uffc4\027\uffc4\030\uffc4\001\002\000\032" +
    "\022\uffaf\024\uffaf\026\uffaf\027\uffaf\030\uffaf\053\uffaf\054" +
    "\uffaf\057\165\060\167\066\uffaf\067\uffaf\070\uffaf\001\002" +
    "\000\024\022\uffb3\024\uffb3\026\uffb3\027\uffb3\030\uffb3\053" +
    "\uffb3\054\uffb3\066\uffb3\067\161\001\002\000\060\022\uff9b" +
    "\024\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033" +
    "\uff9b\034\uff9b\035\uff9b\053\uff9b\054\uff9b\057\uff9b\060\uff9b" +
    "\061\uff9b\062\uff9b\063\uff9b\064\uff9b\066\uff9b\067\uff9b\070" +
    "\uff9b\072\uff9b\073\uff9b\001\002\000\060\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\023\uffd7\024\uffd7\031\uffd7\032\uffd7\033\uffd7\036\uffd7" +
    "\037\uffd7\052\uffd7\070\uffd7\071\uffd7\074\uffd7\075\uffd7\076" +
    "\uffd7\077\uffd7\001\002\000\036\020\055\021\144\031\066" +
    "\032\052\033\102\036\063\037\110\052\054\070\045\071" +
    "\044\074\071\075\065\076\114\077\042\001\002\000\060" +
    "\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\023\uffda\024\uffda\031\uffda\032\uffda" +
    "\033\uffda\036\uffda\037\uffda\052\uffda\070\uffda\071\uffda\074" +
    "\uffda\075\uffda\076\uffda\077\uffda\001\002\000\122\021\uff79" +
    "\022\uff79\024\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031" +
    "\uff79\032\uff79\033\uff79\034\uff79\035\uff79\036\uff79\037\uff79" +
    "\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046" +
    "\uff79\047\uff79\050\uff79\051\uff79\053\uff79\054\uff79\055\uff79" +
    "\056\uff79\057\uff79\060\uff79\061\uff79\062\uff79\063\uff79\064" +
    "\uff79\065\uff79\066\uff79\067\uff79\070\uff79\072\uff79\073\uff79" +
    "\001\002\000\036\020\uff8b\021\uff8b\031\uff8b\032\uff8b\033" +
    "\uff8b\036\uff8b\037\uff8b\052\uff8b\070\uff8b\071\uff8b\074\uff8b" +
    "\075\uff8b\076\uff8b\077\uff8b\001\002\000\004\021\235\001" +
    "\002\000\060\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\036\uffdb\037\uffdb\052\uffdb\070\uffdb" +
    "\071\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\001\002\000" +
    "\122\021\uff7c\022\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c" +
    "\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c\035\uff7c\036" +
    "\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c" +
    "\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\053\uff7c\054" +
    "\uff7c\055\uff7c\056\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c" +
    "\063\uff7c\064\uff7c\065\uff7c\066\uff7c\067\uff7c\070\uff7c\072" +
    "\uff7c\073\uff7c\001\002\000\006\027\234\030\146\001\002" +
    "\000\106\022\uff96\024\uff96\026\uff96\027\uff96\030\uff96\031" +
    "\uff96\032\uff96\033\uff96\034\uff96\035\uff96\040\220\041\223" +
    "\042\227\043\221\044\222\045\232\046\231\047\224\050" +
    "\217\051\230\053\uff96\054\uff96\057\uff96\060\uff96\061\uff96" +
    "\062\uff96\063\uff96\064\uff96\065\226\066\uff96\067\uff96\070" +
    "\uff96\072\uff96\073\uff96\001\002\000\040\020\055\021\046" +
    "\027\uffc9\031\066\032\052\033\102\036\063\037\110\052" +
    "\054\070\045\071\044\074\071\075\065\076\114\077\042" +
    "\001\002\000\012\022\uffc7\026\uffc7\027\uffc7\030\uffc7\001" +
    "\002\000\004\027\213\001\002\000\122\021\177\022\uff93" +
    "\024\uff93\025\173\026\uff93\027\uff93\030\uff93\031\uff93\032" +
    "\uff93\033\uff93\034\uff93\035\uff93\036\174\037\175\040\uff93" +
    "\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047" +
    "\uff93\050\uff93\051\uff93\053\uff93\054\uff93\055\200\056\176" +
    "\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065" +
    "\uff93\066\uff93\067\uff93\070\uff93\072\uff93\073\uff93\001\002" +
    "\000\016\022\uffb7\024\uffb7\026\uffb7\027\uffb7\030\uffb7\053" +
    "\171\001\002\000\046\022\uffa9\024\uffa9\026\uffa9\027\uffa9" +
    "\030\uffa9\053\uffa9\054\uffa9\057\uffa9\060\uffa9\061\uffa9\062" +
    "\uffa9\063\uffa9\064\uffa9\066\uffa9\067\uffa9\070\uffa9\072\130" +
    "\073\126\001\002\000\036\020\uff8c\021\uff8c\031\uff8c\032" +
    "\uff8c\033\uff8c\036\uff8c\037\uff8c\052\uff8c\070\uff8c\071\uff8c" +
    "\074\uff8c\075\uff8c\076\uff8c\077\uff8c\001\002\000\026\022" +
    "\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1\053\uffb1\054\uffb1" +
    "\066\uffb1\067\uffb1\070\163\001\002\000\022\022\uffb5\024" +
    "\uffb5\026\uffb5\027\uffb5\030\uffb5\053\uffb5\054\156\066\155" +
    "\001\002\000\004\021\151\001\002\000\074\002\uffd5\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\023\uffd5\024\uffd5\031\uffd5\032\uffd5\033\uffd5\036\uffd5" +
    "\037\uffd5\052\uffd5\070\uffd5\071\uffd5\074\uffd5\075\uffd5\076" +
    "\uffd5\077\uffd5\001\002\000\060\022\uff9f\024\uff9f\026\uff9f" +
    "\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\141\034\140\035" +
    "\136\053\uff9f\054\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f" +
    "\063\uff9f\064\uff9f\066\uff9f\067\uff9f\070\uff9f\072\uff9f\073" +
    "\uff9f\001\002\000\036\020\055\021\144\031\066\032\052" +
    "\033\102\036\063\037\110\052\054\070\045\071\044\074" +
    "\071\075\065\076\114\077\042\001\002\000\060\011\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\023\uffd8\024\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\036\uffd8\037\uffd8\052\uffd8\070\uffd8\071\uffd8\074\uffd8\075" +
    "\uffd8\076\uffd8\077\uffd8\001\002\000\042\022\uffad\024\uffad" +
    "\026\uffad\027\uffad\030\uffad\053\uffad\054\uffad\057\uffad\060" +
    "\uffad\061\120\062\123\063\121\064\124\066\uffad\067\uffad" +
    "\070\uffad\001\002\000\036\020\055\021\046\031\066\032" +
    "\052\033\102\036\063\037\110\052\054\070\045\071\044" +
    "\074\071\075\065\076\114\077\042\001\002\000\122\021" +
    "\uff7b\022\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b" +
    "\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\037" +
    "\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b" +
    "\046\uff7b\047\uff7b\050\uff7b\051\uff7b\053\uff7b\054\uff7b\055" +
    "\uff7b\056\uff7b\057\uff7b\060\uff7b\061\uff7b\062\uff7b\063\uff7b" +
    "\064\uff7b\065\uff7b\066\uff7b\067\uff7b\070\uff7b\072\uff7b\073" +
    "\uff7b\001\002\000\056\011\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\uffd2\023\uffd2\024\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\036\uffd2\037\uffd2\052\uffd2\070\uffd2" +
    "\071\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2\001\002\000" +
    "\106\022\uff90\024\uff90\026\uff90\027\uff90\030\uff90\031\uff90" +
    "\032\uff90\033\uff90\034\uff90\035\uff90\040\uff90\041\uff90\042" +
    "\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90" +
    "\051\uff90\053\uff90\054\uff90\057\uff90\060\uff90\061\uff90\062" +
    "\uff90\063\uff90\064\uff90\065\uff90\066\uff90\067\uff90\070\uff90" +
    "\072\uff90\073\uff90\001\002\000\106\022\uff96\024\uff96\026" +
    "\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96" +
    "\035\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045" +
    "\uff96\046\uff96\047\uff96\050\uff96\051\uff96\053\uff96\054\uff96" +
    "\057\uff96\060\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065" +
    "\uff96\066\uff96\067\uff96\070\uff96\072\uff96\073\uff96\001\002" +
    "\000\036\020\uffa7\021\uffa7\031\uffa7\032\uffa7\033\uffa7\036" +
    "\uffa7\037\uffa7\052\uffa7\070\uffa7\071\uffa7\074\uffa7\075\uffa7" +
    "\076\uffa7\077\uffa7\001\002\000\036\020\uffa6\021\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\036\uffa6\037\uffa6\052\uffa6\070\uffa6" +
    "\071\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\001\002\000" +
    "\036\020\055\021\046\031\066\032\052\033\102\036\063" +
    "\037\110\052\054\070\045\071\044\074\071\075\065\076" +
    "\114\077\042\001\002\000\036\020\uffa5\021\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\036\uffa5\037\uffa5\052\uffa5\070\uffa5\071" +
    "\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\001\002\000\036" +
    "\020\uffa4\021\uffa4\031\uffa4\032\uffa4\033\uffa4\036\uffa4\037" +
    "\uffa4\052\uffa4\070\uffa4\071\uffa4\074\uffa4\075\uffa4\076\uffa4" +
    "\077\uffa4\001\002\000\046\022\uffa8\024\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\053\uffa8\054\uffa8\057\uffa8\060\uffa8\061\uffa8" +
    "\062\uffa8\063\uffa8\064\uffa8\066\uffa8\067\uffa8\070\uffa8\072" +
    "\130\073\126\001\002\000\036\020\uffa0\021\uffa0\031\uffa0" +
    "\032\uffa0\033\uffa0\036\uffa0\037\uffa0\052\uffa0\070\uffa0\071" +
    "\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\001\002\000\036" +
    "\020\055\021\046\031\066\032\052\033\102\036\063\037" +
    "\110\052\054\070\045\071\044\074\071\075\065\076\114" +
    "\077\042\001\002\000\036\020\uffa1\021\uffa1\031\uffa1\032" +
    "\uffa1\033\uffa1\036\uffa1\037\uffa1\052\uffa1\070\uffa1\071\uffa1" +
    "\074\uffa1\075\uffa1\076\uffa1\077\uffa1\001\002\000\052\022" +
    "\uffa2\024\uffa2\026\uffa2\027\uffa2\030\uffa2\031\132\032\133" +
    "\053\uffa2\054\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063" +
    "\uffa2\064\uffa2\066\uffa2\067\uffa2\070\uffa2\072\uffa2\073\uffa2" +
    "\001\002\000\036\020\uff9d\021\uff9d\031\uff9d\032\uff9d\033" +
    "\uff9d\036\uff9d\037\uff9d\052\uff9d\070\uff9d\071\uff9d\074\uff9d" +
    "\075\uff9d\076\uff9d\077\uff9d\001\002\000\036\020\uff9c\021" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\036\uff9c\037\uff9c\052\uff9c" +
    "\070\uff9c\071\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c\001" +
    "\002\000\036\020\055\021\046\031\066\032\052\033\102" +
    "\036\063\037\110\052\054\070\045\071\044\074\071\075" +
    "\065\076\114\077\042\001\002\000\060\022\uff9e\024\uff9e" +
    "\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\141\034" +
    "\140\035\136\053\uff9e\054\uff9e\057\uff9e\060\uff9e\061\uff9e" +
    "\062\uff9e\063\uff9e\064\uff9e\066\uff9e\067\uff9e\070\uff9e\072" +
    "\uff9e\073\uff9e\001\002\000\036\020\uff97\021\uff97\031\uff97" +
    "\032\uff97\033\uff97\036\uff97\037\uff97\052\uff97\070\uff97\071" +
    "\uff97\074\uff97\075\uff97\076\uff97\077\uff97\001\002\000\036" +
    "\020\055\021\046\031\066\032\052\033\102\036\063\037" +
    "\110\052\054\070\045\071\044\074\071\075\065\076\114" +
    "\077\042\001\002\000\036\020\uff98\021\uff98\031\uff98\032" +
    "\uff98\033\uff98\036\uff98\037\uff98\052\uff98\070\uff98\071\uff98" +
    "\074\uff98\075\uff98\076\uff98\077\uff98\001\002\000\036\020" +
    "\uff99\021\uff99\031\uff99\032\uff99\033\uff99\036\uff99\037\uff99" +
    "\052\uff99\070\uff99\071\uff99\074\uff99\075\uff99\076\uff99\077" +
    "\uff99\001\002\000\060\022\uff9a\024\uff9a\026\uff9a\027\uff9a" +
    "\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\053" +
    "\uff9a\054\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a" +
    "\064\uff9a\066\uff9a\067\uff9a\070\uff9a\072\uff9a\073\uff9a\001" +
    "\002\000\106\022\uff91\024\uff91\026\uff91\027\uff91\030\uff91" +
    "\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\040\uff91\041" +
    "\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91" +
    "\050\uff91\051\uff91\053\uff91\054\uff91\057\uff91\060\uff91\061" +
    "\uff91\062\uff91\063\uff91\064\uff91\065\uff91\066\uff91\067\uff91" +
    "\070\uff91\072\uff91\073\uff91\001\002\000\036\020\055\021" +
    "\046\031\066\032\052\033\102\036\063\037\110\052\054" +
    "\070\045\071\044\074\071\075\065\076\114\077\042\001" +
    "\002\000\006\022\147\030\146\001\002\000\036\020\055" +
    "\021\046\031\066\032\052\033\102\036\063\037\110\052" +
    "\054\070\045\071\044\074\071\075\065\076\114\077\042" +
    "\001\002\000\122\021\uff7a\022\uff7a\024\uff7a\025\uff7a\026" +
    "\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a" +
    "\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043" +
    "\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a" +
    "\053\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a\061" +
    "\uff7a\062\uff7a\063\uff7a\064\uff7a\065\uff7a\066\uff7a\067\uff7a" +
    "\070\uff7a\072\uff7a\073\uff7a\001\002\000\012\022\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\001\002\000\036\020\055\021\046" +
    "\031\066\032\052\033\102\036\063\037\110\052\054\070" +
    "\045\071\044\074\071\075\065\076\114\077\042\001\002" +
    "\000\006\022\153\030\146\001\002\000\054\011\067\013" +
    "\105\014\051\015\047\016\076\017\074\020\055\021\046" +
    "\023\034\031\066\032\052\033\102\036\063\037\110\052" +
    "\054\070\045\071\044\074\071\075\065\076\114\077\042" +
    "\001\002\000\060\011\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\021\uffce\023\uffce\024\uffce" +
    "\031\uffce\032\uffce\033\uffce\036\uffce\037\uffce\052\uffce\070" +
    "\uffce\071\uffce\074\uffce\075\uffce\076\uffce\077\uffce\001\002" +
    "\000\036\020\055\021\046\031\066\032\052\033\102\036" +
    "\063\037\110\052\054\070\045\071\044\074\071\075\065" +
    "\076\114\077\042\001\002\000\036\020\055\021\046\031" +
    "\066\032\052\033\102\036\063\037\110\052\054\070\045" +
    "\071\044\074\071\075\065\076\114\077\042\001\002\000" +
    "\016\022\uffb4\024\uffb4\026\uffb4\027\uffb4\030\uffb4\053\uffb4" +
    "\001\002\000\024\022\uffb2\024\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\053\uffb2\054\uffb2\066\uffb2\067\161\001\002\000\036" +
    "\020\055\021\046\031\066\032\052\033\102\036\063\037" +
    "\110\052\054\070\045\071\044\074\071\075\065\076\114" +
    "\077\042\001\002\000\026\022\uffb0\024\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\053\uffb0\054\uffb0\066\uffb0\067\uffb0\070\163" +
    "\001\002\000\036\020\055\021\046\031\066\032\052\033" +
    "\102\036\063\037\110\052\054\070\045\071\044\074\071" +
    "\075\065\076\114\077\042\001\002\000\032\022\uffae\024" +
    "\uffae\026\uffae\027\uffae\030\uffae\053\uffae\054\uffae\057\165" +
    "\060\167\066\uffae\067\uffae\070\uffae\001\002\000\036\020" +
    "\uffab\021\uffab\031\uffab\032\uffab\033\uffab\036\uffab\037\uffab" +
    "\052\uffab\070\uffab\071\uffab\074\uffab\075\uffab\076\uffab\077" +
    "\uffab\001\002\000\036\020\055\021\046\031\066\032\052" +
    "\033\102\036\063\037\110\052\054\070\045\071\044\074" +
    "\071\075\065\076\114\077\042\001\002\000\036\020\uffaa" +
    "\021\uffaa\031\uffaa\032\uffaa\033\uffaa\036\uffaa\037\uffaa\052" +
    "\uffaa\070\uffaa\071\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa" +
    "\001\002\000\042\022\uffac\024\uffac\026\uffac\027\uffac\030" +
    "\uffac\053\uffac\054\uffac\057\uffac\060\uffac\061\120\062\123" +
    "\063\121\064\124\066\uffac\067\uffac\070\uffac\001\002\000" +
    "\036\020\055\021\046\031\066\032\052\033\102\036\063" +
    "\037\110\052\054\070\045\071\044\074\071\075\065\076" +
    "\114\077\042\001\002\000\014\022\uffb6\024\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\001\002\000\036\020\055\021\046\031" +
    "\066\032\052\033\102\036\063\037\110\052\054\070\045" +
    "\071\044\074\071\075\065\076\114\077\042\001\002\000" +
    "\122\021\uff82\022\uff82\024\uff82\025\uff82\026\uff82\027\uff82" +
    "\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036" +
    "\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82" +
    "\045\uff82\046\uff82\047\uff82\050\uff82\051\uff82\053\uff82\054" +
    "\uff82\055\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062\uff82" +
    "\063\uff82\064\uff82\065\uff82\066\uff82\067\uff82\070\uff82\072" +
    "\uff82\073\uff82\001\002\000\122\021\uff81\022\uff81\024\uff81" +
    "\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032\uff81\033" +
    "\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041\uff81" +
    "\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050" +
    "\uff81\051\uff81\053\uff81\054\uff81\055\uff81\056\uff81\057\uff81" +
    "\060\uff81\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81\066" +
    "\uff81\067\uff81\070\uff81\072\uff81\073\uff81\001\002\000\004" +
    "\074\210\001\002\000\040\020\055\021\046\022\uff80\031" +
    "\066\032\052\033\102\036\063\037\110\052\054\070\045" +
    "\071\044\074\071\075\065\076\114\077\042\001\002\000" +
    "\004\074\201\001\002\000\122\021\uff84\022\uff84\024\uff84" +
    "\025\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033" +
    "\uff84\034\uff84\035\uff84\036\uff84\037\uff84\040\uff84\041\uff84" +
    "\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047\uff84\050" +
    "\uff84\051\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057\uff84" +
    "\060\uff84\061\uff84\062\uff84\063\uff84\064\uff84\065\uff84\066" +
    "\uff84\067\uff84\070\uff84\072\uff84\073\uff84\001\002\000\004" +
    "\022\207\001\002\000\006\022\uff7e\030\uff7e\001\002\000" +
    "\006\022\uff7f\030\205\001\002\000\036\020\055\021\046" +
    "\031\066\032\052\033\102\036\063\037\110\052\054\070" +
    "\045\071\044\074\071\075\065\076\114\077\042\001\002" +
    "\000\006\022\uff7d\030\uff7d\001\002\000\122\021\uff85\022" +
    "\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85" +
    "\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040" +
    "\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85" +
    "\047\uff85\050\uff85\051\uff85\053\uff85\054\uff85\055\uff85\056" +
    "\uff85\057\uff85\060\uff85\061\uff85\062\uff85\063\uff85\064\uff85" +
    "\065\uff85\066\uff85\067\uff85\070\uff85\072\uff85\073\uff85\001" +
    "\002\000\122\021\uff83\022\uff83\024\uff83\025\uff83\026\uff83" +
    "\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035" +
    "\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83" +
    "\044\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051\uff83\053" +
    "\uff83\054\uff83\055\uff83\056\uff83\057\uff83\060\uff83\061\uff83" +
    "\062\uff83\063\uff83\064\uff83\065\uff83\066\uff83\067\uff83\070" +
    "\uff83\072\uff83\073\uff83\001\002\000\006\026\212\030\146" +
    "\001\002\000\122\021\uff86\022\uff86\024\uff86\025\uff86\026" +
    "\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86" +
    "\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043" +
    "\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86" +
    "\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061" +
    "\uff86\062\uff86\063\uff86\064\uff86\065\uff86\066\uff86\067\uff86" +
    "\070\uff86\072\uff86\073\uff86\001\002\000\060\011\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\023\uffcb\024\uffcb\031\uffcb\032\uffcb\033\uffcb\036" +
    "\uffcb\037\uffcb\052\uffcb\070\uffcb\071\uffcb\074\uffcb\075\uffcb" +
    "\076\uffcb\077\uffcb\001\002\000\010\022\uffc8\027\uffc8\030" +
    "\146\001\002\000\004\027\216\001\002\000\060\011\uffca" +
    "\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020" +
    "\uffca\021\uffca\023\uffca\024\uffca\031\uffca\032\uffca\033\uffca" +
    "\036\uffca\037\uffca\052\uffca\070\uffca\071\uffca\074\uffca\075" +
    "\uffca\076\uffca\077\uffca\001\002\000\036\020\uffb9\021\uffb9" +
    "\031\uffb9\032\uffb9\033\uffb9\036\uffb9\037\uffb9\052\uffb9\070" +
    "\uffb9\071\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9\001\002" +
    "\000\036\020\uffc1\021\uffc1\031\uffc1\032\uffc1\033\uffc1\036" +
    "\uffc1\037\uffc1\052\uffc1\070\uffc1\071\uffc1\074\uffc1\075\uffc1" +
    "\076\uffc1\077\uffc1\001\002\000\036\020\uffbe\021\uffbe\031" +
    "\uffbe\032\uffbe\033\uffbe\036\uffbe\037\uffbe\052\uffbe\070\uffbe" +
    "\071\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\001\002\000" +
    "\036\020\uffbd\021\uffbd\031\uffbd\032\uffbd\033\uffbd\036\uffbd" +
    "\037\uffbd\052\uffbd\070\uffbd\071\uffbd\074\uffbd\075\uffbd\076" +
    "\uffbd\077\uffbd\001\002\000\036\020\uffc0\021\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\036\uffc0\037\uffc0\052\uffc0\070\uffc0\071" +
    "\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\001\002\000\036" +
    "\020\uffba\021\uffba\031\uffba\032\uffba\033\uffba\036\uffba\037" +
    "\uffba\052\uffba\070\uffba\071\uffba\074\uffba\075\uffba\076\uffba" +
    "\077\uffba\001\002\000\036\020\055\021\046\031\066\032" +
    "\052\033\102\036\063\037\110\052\054\070\045\071\044" +
    "\074\071\075\065\076\114\077\042\001\002\000\036\020" +
    "\uffc2\021\uffc2\031\uffc2\032\uffc2\033\uffc2\036\uffc2\037\uffc2" +
    "\052\uffc2\070\uffc2\071\uffc2\074\uffc2\075\uffc2\076\uffc2\077" +
    "\uffc2\001\002\000\036\020\uffbf\021\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\036\uffbf\037\uffbf\052\uffbf\070\uffbf\071\uffbf\074" +
    "\uffbf\075\uffbf\076\uffbf\077\uffbf\001\002\000\036\020\uffb8" +
    "\021\uffb8\031\uffb8\032\uffb8\033\uffb8\036\uffb8\037\uffb8\052" +
    "\uffb8\070\uffb8\071\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8" +
    "\001\002\000\036\020\uffbb\021\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\036\uffbb\037\uffbb\052\uffbb\070\uffbb\071\uffbb\074\uffbb" +
    "\075\uffbb\076\uffbb\077\uffbb\001\002\000\036\020\uffbc\021" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\036\uffbc\037\uffbc\052\uffbc" +
    "\070\uffbc\071\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\001" +
    "\002\000\014\022\uffc3\024\uffc3\026\uffc3\027\uffc3\030\uffc3" +
    "\001\002\000\060\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\023\uffd6\024\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\036\uffd6\037\uffd6\052\uffd6\070" +
    "\uffd6\071\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6\001\002" +
    "\000\036\020\055\021\046\031\066\032\052\033\102\036" +
    "\063\037\110\052\054\070\045\071\044\074\071\075\065" +
    "\076\114\077\042\001\002\000\006\022\237\030\146\001" +
    "\002\000\054\011\067\013\105\014\051\015\047\016\076" +
    "\017\074\020\055\021\046\023\034\031\066\032\052\033" +
    "\102\036\063\037\110\052\054\070\045\071\044\074\071" +
    "\075\065\076\114\077\042\001\002\000\060\011\uffcf\012" +
    "\241\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\023\uffcf\024\uffcf\031\uffcf\032\uffcf\033\uffcf\036" +
    "\uffcf\037\uffcf\052\uffcf\070\uffcf\071\uffcf\074\uffcf\075\uffcf" +
    "\076\uffcf\077\uffcf\001\002\000\054\011\067\013\105\014" +
    "\051\015\047\016\076\017\074\020\055\021\046\023\034" +
    "\031\066\032\052\033\102\036\063\037\110\052\054\070" +
    "\045\071\044\074\071\075\065\076\114\077\042\001\002" +
    "\000\060\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0\024\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\036\uffd0\037\uffd0\052\uffd0\070\uffd0\071" +
    "\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\001\002\000\106" +
    "\022\uff92\024\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032" +
    "\uff92\033\uff92\034\uff92\035\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051" +
    "\uff92\053\uff92\054\uff92\057\uff92\060\uff92\061\uff92\062\uff92" +
    "\063\uff92\064\uff92\065\uff92\066\uff92\067\uff92\070\uff92\072" +
    "\uff92\073\uff92\001\002\000\106\022\uff8f\024\uff8f\026\uff8f" +
    "\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035" +
    "\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f" +
    "\046\uff8f\047\uff8f\050\uff8f\051\uff8f\053\uff8f\054\uff8f\057" +
    "\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f" +
    "\066\uff8f\067\uff8f\070\uff8f\072\uff8f\073\uff8f\001\002\000" +
    "\050\004\010\005\015\006\004\007\007\010\006\020\055" +
    "\021\046\031\066\032\052\033\102\036\063\037\110\052" +
    "\054\070\045\071\044\074\071\075\065\076\114\077\042" +
    "\001\002\000\004\022\251\001\002\000\006\022\uffe4\033" +
    "\023\001\002\000\004\022\uff94\001\002\000\106\022\uff8e" +
    "\024\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033" +
    "\uff8e\034\uff8e\035\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e" +
    "\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\053" +
    "\uff8e\054\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e" +
    "\064\uff8e\065\uff8e\066\uff8e\067\uff8e\070\uff8e\072\uff8e\073" +
    "\uff8e\001\002\000\040\020\055\021\046\027\uffc9\031\066" +
    "\032\052\033\102\036\063\037\110\052\054\070\045\071" +
    "\044\074\071\075\065\076\114\077\042\001\002\000\004" +
    "\027\254\001\002\000\040\020\055\021\046\027\uffc9\031" +
    "\066\032\052\033\102\036\063\037\110\052\054\070\045" +
    "\071\044\074\071\075\065\076\114\077\042\001\002\000" +
    "\004\027\256\001\002\000\040\020\055\021\046\022\uffc9" +
    "\031\066\032\052\033\102\036\063\037\110\052\054\070" +
    "\045\071\044\074\071\075\065\076\114\077\042\001\002" +
    "\000\004\022\260\001\002\000\054\011\067\013\105\014" +
    "\051\015\047\016\076\017\074\020\055\021\046\023\034" +
    "\031\066\032\052\033\102\036\063\037\110\052\054\070" +
    "\045\071\044\074\071\075\065\076\114\077\042\001\002" +
    "\000\060\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016" +
    "\uffcd\017\uffcd\020\uffcd\021\uffcd\023\uffcd\024\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\036\uffcd\037\uffcd\052\uffcd\070\uffcd\071" +
    "\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd\001\002\000\060" +
    "\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\023\uffcc\024\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\036\uffcc\037\uffcc\052\uffcc\070\uffcc\071\uffcc\074" +
    "\uffcc\075\uffcc\076\uffcc\077\uffcc\001\002\000\004\022\264" +
    "\001\002\000\036\020\055\021\046\031\066\032\052\033" +
    "\102\036\063\037\110\052\054\070\045\071\044\074\071" +
    "\075\065\076\114\077\042\001\002\000\106\022\uff95\024" +
    "\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95" +
    "\034\uff95\035\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044" +
    "\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\053\uff95" +
    "\054\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064" +
    "\uff95\065\uff95\066\uff95\067\uff95\070\uff95\072\uff95\073\uff95" +
    "\001\002\000\014\022\uffeb\025\uffeb\027\uffeb\030\uffeb\065" +
    "\uffeb\001\002\000\006\022\uffe1\030\uffe1\001\002\000\016" +
    "\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\001" +
    "\002\000\010\022\uffdc\025\272\030\uffdc\001\002\000\036" +
    "\020\055\021\046\031\066\032\052\033\102\036\063\037" +
    "\110\052\054\070\045\071\044\074\071\075\065\076\114" +
    "\077\042\001\002\000\004\026\uffc5\001\002\000\004\026" +
    "\275\001\002\000\014\022\uffea\025\uffea\027\uffea\030\uffea" +
    "\065\uffea\001\002\000\006\022\uffe3\074\uffe3\001\002\000" +
    "\006\033\023\074\uffe4\001\002\000\072\002\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\023\ufffc" +
    "\024\ufffc\031\ufffc\032\ufffc\033\ufffc\036\ufffc\037\ufffc\052" +
    "\ufffc\070\ufffc\071\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc" +
    "\001\002\000\006\027\uffef\030\uffef\001\002\000\040\020" +
    "\055\021\046\023\303\031\066\032\052\033\102\036\063" +
    "\037\110\052\054\070\045\071\044\074\071\075\065\076" +
    "\114\077\042\001\002\000\040\020\055\021\046\023\303" +
    "\031\066\032\052\033\102\036\063\037\110\052\054\070" +
    "\045\071\044\074\071\075\065\076\114\077\042\001\002" +
    "\000\010\024\uffe9\027\uffe9\030\uffe9\001\002\000\006\027" +
    "\uffed\030\uffed\001\002\000\006\024\311\030\310\001\002" +
    "\000\006\024\uffe7\030\uffe7\001\002\000\040\020\055\021" +
    "\046\023\303\031\066\032\052\033\102\036\063\037\110" +
    "\052\054\070\045\071\044\074\071\075\065\076\114\077" +
    "\042\001\002\000\010\024\uffe8\027\uffe8\030\uffe8\001\002" +
    "\000\006\024\uffe6\030\uffe6\001\002\000\016\021\uffe5\022" +
    "\uffe5\025\uffe5\027\uffe5\030\uffe5\065\uffe5\001\002\000\004" +
    "\002\001\001\002\000\016\002\000\004\000\005\000\006" +
    "\000\007\000\010\000\001\002\000\014\022\ufff3\023\333" +
    "\027\ufff3\033\ufff3\074\ufff3\001\002\000\014\004\010\005" +
    "\015\006\004\007\007\010\006\001\002\000\006\033\023" +
    "\074\uffe4\001\002\000\016\004\010\005\015\006\004\007" +
    "\007\010\006\024\323\001\002\000\006\033\023\074\uffe4" +
    "\001\002\000\012\022\ufff4\027\ufff4\033\ufff4\074\ufff4\001" +
    "\002\000\010\025\272\027\uffde\030\uffde\001\002\000\006" +
    "\027\327\030\326\001\002\000\006\033\023\074\uffe4\001" +
    "\002\000\016\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\024\uffdf\001\002\000\010\025\272\027\uffdd\030\uffdd\001" +
    "\002\000\006\027\332\030\326\001\002\000\016\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\010\uffe0\024\uffe0\001\002\000" +
    "\014\004\010\005\015\006\004\007\007\010\006\001\002" +
    "\000\016\004\010\005\015\006\004\007\007\010\006\024" +
    "\335\001\002\000\012\022\ufff5\027\ufff5\033\ufff5\074\ufff5" +
    "\001\002\000\014\022\ufff0\023\342\027\ufff0\033\ufff0\074" +
    "\ufff0\001\002\000\014\004\010\005\015\006\004\007\007" +
    "\010\006\001\002\000\016\004\010\005\015\006\004\007" +
    "\007\010\006\024\341\001\002\000\012\022\ufff1\027\ufff1" +
    "\033\ufff1\074\ufff1\001\002\000\014\004\010\005\015\006" +
    "\004\007\007\010\006\001\002\000\016\004\010\005\015" +
    "\006\004\007\007\010\006\024\344\001\002\000\012\022" +
    "\ufff2\027\ufff2\033\ufff2\074\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\014\002\010\003\013\004\004\005\011\006" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\314\004\004\005\011\006\012\001\001\000\002\001\001" +
    "\000\014\007\021\010\020\011\016\015\015\016\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\275\001\001\000\002\001\001" +
    "\000\010\006\026\014\025\017\030\001\001\000\002\001" +
    "\001\000\010\011\270\015\015\016\265\001\001\000\004" +
    "\025\267\001\001\000\002\001\001\000\006\006\026\014" +
    "\266\001\001\000\004\025\034\001\001\000\004\022\035" +
    "\001\001\000\002\001\001\000\010\004\040\006\036\026" +
    "\037\001\001\000\014\007\021\010\020\011\016\015\015" +
    "\016\265\001\001\000\060\023\114\024\067\025\063\027" +
    "\047\030\061\031\110\032\071\034\074\037\077\040\055" +
    "\041\103\042\057\043\102\044\056\046\111\050\100\052" +
    "\042\054\106\056\060\060\072\061\112\062\076\065\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\006\246\032\144\034\074\037\077\040\055\041\103\042" +
    "\057\043\102\044\056\046\111\050\100\052\042\054\106" +
    "\056\060\057\262\060\072\061\112\062\076\065\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\060\243\061\112\062\076\065\052\001\001\000\002" +
    "\001\001\000\004\045\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\060\242\061\112" +
    "\062\076\065\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\224\001" +
    "\001\000\046\032\213\033\214\034\074\037\077\040\055" +
    "\041\103\042\057\043\102\044\056\046\111\050\100\052" +
    "\042\054\106\056\060\060\072\061\112\062\076\065\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\136\001\001\000\012" +
    "\060\142\061\112\062\076\065\052\001\001\000\002\001" +
    "\001\000\004\047\121\001\001\000\014\056\115\060\116" +
    "\061\112\062\076\065\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\050\124\052\042\054" +
    "\106\056\060\060\116\061\112\062\076\065\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\126\001" +
    "\001\000\002\001\001\000\020\052\130\054\106\056\060" +
    "\060\116\061\112\062\076\065\052\001\001\000\002\001" +
    "\001\000\004\053\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\054\134\056\060\060\116\061\112\062" +
    "\076\065\052\001\001\000\004\055\136\001\001\000\002" +
    "\001\001\000\014\056\141\060\116\061\112\062\076\065" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\032\144\034\074\037" +
    "\077\040\055\041\103\042\057\043\102\044\056\046\111" +
    "\050\100\052\042\054\106\056\060\060\072\061\112\062" +
    "\076\065\052\001\001\000\002\001\001\000\042\034\147" +
    "\037\077\040\055\041\103\042\057\043\102\044\056\046" +
    "\111\050\100\052\042\054\106\056\060\060\072\061\112" +
    "\062\076\065\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\032\151\034\074\037\077\040\055\041\103" +
    "\042\057\043\102\044\056\046\111\050\100\052\042\054" +
    "\106\056\060\060\072\061\112\062\076\065\052\001\001" +
    "\000\002\001\001\000\060\023\153\024\067\025\063\027" +
    "\047\030\061\031\110\032\071\034\074\037\077\040\055" +
    "\041\103\042\057\043\102\044\056\046\111\050\100\052" +
    "\042\054\106\056\060\060\072\061\112\062\076\065\052" +
    "\001\001\000\002\001\001\000\032\042\157\043\102\044" +
    "\056\046\111\050\100\052\042\054\106\056\060\060\116" +
    "\061\112\062\076\065\052\001\001\000\036\037\156\041" +
    "\103\042\057\043\102\044\056\046\111\050\100\052\042" +
    "\054\106\056\060\060\116\061\112\062\076\065\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\043\161" +
    "\044\056\046\111\050\100\052\042\054\106\056\060\060" +
    "\116\061\112\062\076\065\052\001\001\000\002\001\001" +
    "\000\026\044\163\046\111\050\100\052\042\054\106\056" +
    "\060\060\116\061\112\062\076\065\052\001\001\000\004" +
    "\045\165\001\001\000\002\001\001\000\024\046\167\050" +
    "\100\052\042\054\106\056\060\060\116\061\112\062\076" +
    "\065\052\001\001\000\002\001\001\000\004\047\121\001" +
    "\001\000\040\037\077\040\171\041\103\042\057\043\102" +
    "\044\056\046\111\050\100\052\042\054\106\056\060\060" +
    "\116\061\112\062\076\065\052\001\001\000\002\001\001" +
    "\000\044\032\210\034\074\037\077\040\055\041\103\042" +
    "\057\043\102\044\056\046\111\050\100\052\042\054\106" +
    "\056\060\060\072\061\112\062\076\065\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\034\202\037\077\040\055\041\103\042\057\043\102\044" +
    "\056\046\111\050\100\052\042\054\106\056\060\060\072" +
    "\061\112\062\076\063\203\064\201\065\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\034\205\037\077\040" +
    "\055\041\103\042\057\043\102\044\056\046\111\050\100" +
    "\052\042\054\106\056\060\060\072\061\112\062\076\065" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\034\232\037\077\040\055\041\103\042\057\043\102\044" +
    "\056\046\111\050\100\052\042\054\106\056\060\060\072" +
    "\061\112\062\076\065\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\032" +
    "\235\034\074\037\077\040\055\041\103\042\057\043\102" +
    "\044\056\046\111\050\100\052\042\054\106\056\060\060" +
    "\072\061\112\062\076\065\052\001\001\000\002\001\001" +
    "\000\060\023\237\024\067\025\063\027\047\030\061\031" +
    "\110\032\071\034\074\037\077\040\055\041\103\042\057" +
    "\043\102\044\056\046\111\050\100\052\042\054\106\056" +
    "\060\060\072\061\112\062\076\065\052\001\001\000\002" +
    "\001\001\000\060\023\241\024\067\025\063\027\047\030" +
    "\061\031\110\032\071\034\074\037\077\040\055\041\103" +
    "\042\057\043\102\044\056\046\111\050\100\052\042\054" +
    "\106\056\060\060\072\061\112\062\076\065\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\006\246\032\144\034\074\037\077\040\055\041\103" +
    "\042\057\043\102\044\056\046\111\050\100\052\042\054" +
    "\106\056\060\057\245\060\072\061\112\062\076\065\052" +
    "\001\001\000\002\001\001\000\004\015\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\032\213\033\252" +
    "\034\074\037\077\040\055\041\103\042\057\043\102\044" +
    "\056\046\111\050\100\052\042\054\106\056\060\060\072" +
    "\061\112\062\076\065\052\001\001\000\002\001\001\000" +
    "\046\032\213\033\254\034\074\037\077\040\055\041\103" +
    "\042\057\043\102\044\056\046\111\050\100\052\042\054" +
    "\106\056\060\060\072\061\112\062\076\065\052\001\001" +
    "\000\002\001\001\000\046\032\213\033\256\034\074\037" +
    "\077\040\055\041\103\042\057\043\102\044\056\046\111" +
    "\050\100\052\042\054\106\056\060\060\072\061\112\062" +
    "\076\065\052\001\001\000\002\001\001\000\060\023\260" +
    "\024\067\025\063\027\047\030\061\031\110\032\071\034" +
    "\074\037\077\040\055\041\103\042\057\043\102\044\056" +
    "\046\111\050\100\052\042\054\106\056\060\060\072\061" +
    "\112\062\076\065\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\056\264\060\116\061" +
    "\112\062\076\065\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\036\273\037\077\040\272\041\103\042\057" +
    "\043\102\044\056\046\111\050\100\052\042\054\106\056" +
    "\060\060\116\061\112\062\076\065\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\300\011\016\015\015\016\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\012\304\034" +
    "\303\037\077\040\055\041\103\042\057\043\102\044\056" +
    "\046\111\050\100\052\042\054\106\056\060\060\072\061" +
    "\112\062\076\065\052\001\001\000\046\012\306\013\305" +
    "\034\303\037\077\040\055\041\103\042\057\043\102\044" +
    "\056\046\111\050\100\052\042\054\106\056\060\060\072" +
    "\061\112\062\076\065\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\012\311\034\303\037\077\040\055\041\103\042\057\043" +
    "\102\044\056\046\111\050\100\052\042\054\106\056\060" +
    "\060\072\061\112\062\076\065\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\317\020" +
    "\320\001\001\000\012\011\323\015\015\016\265\021\330" +
    "\001\001\000\004\006\321\001\001\000\012\011\323\015" +
    "\015\016\265\021\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\327\015\015\016" +
    "\265\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\317\020\333\001" +
    "\001\000\004\006\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\317\020\337\001\001\000\004\006" +
    "\321\001\001\000\002\001\001\000\006\006\317\020\342" +
    "\001\001\000\004\006\321\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void report_error(String msg, Object info)
	{
		StringBuffer m = new StringBuffer("\tParsing Error!");
		if(info instanceof java_cup.runtime.symbol)
		{
			java_cup.runtime.symbol s= (java_cup.runtime.symbol)info;
			if(s.left>=0)
			{
				m.append(" in line " + (s.left +1 ));
				if (s.right >= 0)
				{
					m.append(", column " + (s.right + 1));
					if(s.value!=null)
						m.append(": "+s.value);
				}
			}
		}
		m.append(" : " + message);
		System.err.println(m);
		System.exit(1);
	}

	public Parser(InputStream in)
	{
		this(new Lexer(in)); 
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {




  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program decl_or_func_def 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclOrDef t = (DeclOrDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(t!=null) p.list.add(t); RESULT=p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= decl_or_func_def 
            {
              Program RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclOrDef t = (DeclOrDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Program(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_or_func_def ::= declaration 
            {
              DeclOrDef RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration t = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_or_func_def",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_or_func_def ::= func_def 
            {
              DeclOrDef RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncDef t = (FuncDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_or_func_def",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= type init_declarators SEMI 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InitDeclarators i = (InitDeclarators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new Declaration(t,i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= type SEMI 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new Declaration(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // func_def ::= type plain_declarator LPAREN parameters RPAREN compound_stmt 
            {
              FuncDef RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		PlainDeclarator p = (PlainDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Parameters s = (Parameters)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompoundStmt c = (CompoundStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new FuncDef(t,p,s,c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func_def ::= type plain_declarator LPAREN RPAREN compound_stmt 
            {
              FuncDef RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PlainDeclarator p = (PlainDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompoundStmt c = (CompoundStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new FuncDef(t,p,c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= VOID 
            {
              TypeSpecifier RESULT =null;
		 RESULT = new TypeSpecifier(TypeSpecifier.Type.VOID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= CHAR 
            {
              TypeSpecifier RESULT =null;
		 RESULT = new TypeSpecifier(TypeSpecifier.Type.CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= INT 
            {
              TypeSpecifier RESULT =null;
		 RESULT = new TypeSpecifier(TypeSpecifier.Type.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= STRUCT ID LBRACE type_declarators_list RBRACE 
            {
              TypeSpecifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeDeclaratorsList t = (TypeDeclaratorsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeSpecifier(TypeSpecifier.Type.STRUCT, i, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= STRUCT LBRACE type_declarators_list RBRACE 
            {
              TypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeDeclaratorsList t = (TypeDeclaratorsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeSpecifier(TypeSpecifier.Type.STRUCT, null, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= STRUCT ID 
            {
              TypeSpecifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeSpecifier(TypeSpecifier.Type.STRUCT, s, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= UNION ID LBRACE type_declarators_list RBRACE 
            {
              TypeSpecifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeDeclaratorsList t = (TypeDeclaratorsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeSpecifier(TypeSpecifier.Type.UNION, i, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= UNION LBRACE type_declarators_list RBRACE 
            {
              TypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeDeclaratorsList t = (TypeDeclaratorsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeSpecifier(TypeSpecifier.Type.UNION, null, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= UNION ID 
            {
              TypeSpecifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeSpecifier(TypeSpecifier.Type.UNION, s, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // init_declarators ::= init_declarators COMMA init_declarator 
            {
              InitDeclarators RESULT =null;
		int ideclsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ideclsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InitDeclarators idecls = (InitDeclarators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ideclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ideclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitDeclarator idecl = (InitDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 idecls.idecl_list.add(idecl); RESULT= idecls; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarators",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // init_declarators ::= init_declarator 
            {
              InitDeclarators RESULT =null;
		int ideclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ideclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitDeclarator idecl = (InitDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new InitDeclarators(idecl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarators",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // init_declarator ::= declarator ASSIGN initializer 
            {
              InitDeclarator RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Declarator d = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initializer v = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new InitDeclarator(d,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // init_declarator ::= declarator 
            {
              InitDeclarator RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declarator d = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new InitDeclarator(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declarator ::= plain_declarator 
            {
              Declarator RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlainDeclarator pd = (PlainDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Declarator(1,pd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declarator ::= declarator LMPAREN constant_expression RMPAREN 
            {
              Declarator RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Declarator d = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 d.exprs.add(c); RESULT=d;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // initializer ::= assignment_expr 
            {
              Initializer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Initializer(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // initializer ::= LBRACE initializer_list RBRACE 
            {
              Initializer RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InitializerList is = (InitializerList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new Initializer(is); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // initializer_list ::= initializer 
            {
              InitializerList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initializer i = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new InitializerList(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // initializer_list ::= initializer_list COMMA initializer 
            {
              InitializerList RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InitializerList is = (InitializerList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initializer i = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 is.initializer_list.add(i); RESULT=is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // plain_declarator ::= star_list ID 
            {
              PlainDeclarator RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Star s = (Star)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new PlainDeclarator(s,i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declarator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // star_list ::= 
            {
              Star RESULT =null;
		 RESULT=new Star(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("star_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // star_list ::= TIMES star_list 
            {
              Star RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Star s = (Star)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ++s.total; RESULT=s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("star_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameters ::= plain_declaration 
            {
              Parameters RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlainDeclaration pd = (PlainDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Parameters(pd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameters ::= parameters COMMA plain_declaration 
            {
              Parameters RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Parameters ps = (Parameters)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlainDeclaration pd = (PlainDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ps.plain_declaration_list.add(pd); RESULT=ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_declarators_list ::= type declarators SEMI 
            {
              TypeDeclaratorsList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Declarators s = (Declarators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new TypeDeclaratorsList(new TypeDeclarators(t,s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declarators_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_declarators_list ::= type_declarators_list type declarators SEMI 
            {
              TypeDeclaratorsList RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeDeclaratorsList ts = (TypeDeclaratorsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Declarators s = (Declarators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 ts.type_declarators_list.add(new TypeDeclarators(t,s)); RESULT=ts; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declarators_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declarators ::= declarator 
            {
              Declarators RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Declarators(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarators",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declarators ::= declarators COMMA declarator 
            {
              Declarators RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Declarators decls = (Declarators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 decls.declarator_list.add(decl); RESULT=decl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarators",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // plain_declaration ::= type declarator 
            {
              PlainDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declarator d = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlainDeclaration(t,d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= expression_stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionStmt e = (ExpressionStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= compound_stmt 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompoundStmt c = (CompoundStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= selection_stmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SelectionStmt s = (SelectionStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= iteration_stmt 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IterationStmt i = (IterationStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= jump_stmt 
            {
              Stmt RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JumpStmt j = (JumpStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=j; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression_stmt ::= expression SEMI 
            {
              ExpressionStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new ExpressionStmt(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // compound_stmt ::= LBRACE declaration_list stmt_list RBRACE 
            {
              CompoundStmt RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclarationList dd = (DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new CompoundStmt(dd,ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaration_list ::= declaration_list declaration 
            {
              DeclarationList RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclarationList dd = (DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration decl = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 dd.declarations.add(decl); RESULT=dd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaration_list ::= 
            {
              DeclarationList RESULT =null;
		 RESULT=new DeclarationList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmt_list ::= stmt_list stmt 
            {
              StmtList RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ss.stmts.add(s); RESULT=ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmt_list ::= 
            {
              StmtList RESULT =null;
		 RESULT=new StmtList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // selection_stmt ::= IF LPAREN expression RPAREN stmt ELSE stmt 
            {
              SelectionStmt RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr ec = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt ee = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new SelectionStmt(ec,s,ee); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // selection_stmt ::= IF LPAREN expression RPAREN stmt 
            {
              SelectionStmt RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ec = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new SelectionStmt(ec,s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // iteration_stmt ::= WHILE LPAREN expression RPAREN stmt 
            {
              IterationStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new IterationStmt(e,s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // iteration_stmt ::= FOR LPAREN plain_expr SEMI plain_expr SEMI plain_expr RPAREN stmt 
            {
              IterationStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new IterationStmt(a,b,c,s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // jump_stmt ::= CONTINUE SEMI 
            {
              JumpStmt RESULT =null;
		 RESULT=new JumpStmt(JumpStmt.JumpType.CONTINUE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // jump_stmt ::= BREAK SEMI 
            {
              JumpStmt RESULT =null;
		 RESULT=new JumpStmt(JumpStmt.JumpType.BREAK); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // jump_stmt ::= RETURN plain_expr SEMI 
            {
              JumpStmt RESULT =null;
		 RESULT=new JumpStmt(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // plain_expr ::= 
            {
              Expr RESULT =null;
		 RESULT=null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // plain_expr ::= expression 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= assignment_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= expression COMMA assignment_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Expression(e,a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // constant_expression ::= logical_or_expression 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assignment_expr ::= logical_or_expression 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assignment_expr ::= unary_expression assignment_operator assignment_expr 
            {
              Expr RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AssignmentExpr.Op a = (AssignmentExpr.Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new AssignmentExpr(u,a,ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // assignment_operator ::= ASSIGN 
            {
              AssignmentExpr.Op RESULT =null;
		 RESULT = AssignmentExpr.Op.ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // assignment_operator ::= MUL_ASSIGN 
            {
              AssignmentExpr.Op RESULT =null;
		 RESULT = AssignmentExpr.Op.MUL_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // assignment_operator ::= DIV_ASSIGN 
            {
              AssignmentExpr.Op RESULT =null;
		 RESULT = AssignmentExpr.Op.DIV_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // assignment_operator ::= MOD_ASSIGN 
            {
              AssignmentExpr.Op RESULT =null;
		 RESULT = AssignmentExpr.Op.MOD_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // assignment_operator ::= ADD_ASSIGN 
            {
              AssignmentExpr.Op RESULT =null;
		 RESULT = AssignmentExpr.Op.ADD_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assignment_operator ::= SUB_ASSIGN 
            {
              AssignmentExpr.Op RESULT =null;
		 RESULT = AssignmentExpr.Op.SUB_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assignment_operator ::= SHL_ASSIGN 
            {
              AssignmentExpr.Op RESULT =null;
		 RESULT = AssignmentExpr.Op.SHL_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assignment_operator ::= SHR_ASSIGN 
            {
              AssignmentExpr.Op RESULT =null;
		 RESULT = AssignmentExpr.Op.SHR_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assignment_operator ::= AND_ASSIGN 
            {
              AssignmentExpr.Op RESULT =null;
		 RESULT = AssignmentExpr.Op.AND_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assignment_operator ::= XOR_ASSIGN 
            {
              AssignmentExpr.Op RESULT =null;
		 RESULT = AssignmentExpr.Op.XOR_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // assignment_operator ::= OR_ASSIGN 
            {
              AssignmentExpr.Op RESULT =null;
		 RESULT = AssignmentExpr.Op.OR_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // logical_or_expression ::= logical_and_expression 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // logical_or_expression ::= logical_and_expression OR logical_or_expression 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new BinaryExpr(BinaryExpr.Op.OR,l,r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // logical_and_expression ::= inclusive_or_expression 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // logical_and_expression ::= inclusive_or_expression AND logical_and_expression 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Op.AND, l, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // inclusive_or_expression ::= exclusive_or_expression 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // inclusive_or_expression ::= inclusive_or_expression BIT_OR exclusive_or_expression 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Op.BIT_OR, i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // exclusive_or_expression ::= and_expression 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // exclusive_or_expression ::= exclusive_or_expression BIT_XOR and_expression 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Op.BIT_XOR, e, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // and_expression ::= equality_expression 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // and_expression ::= and_expression BIT_AND equality_expression 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(BinaryExpr.Op.BIT_AND, a, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // equality_expression ::= relational_expression 
            {
              Expr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // equality_expression ::= equality_expression equality_operator relational_expression 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinaryExpr.Op op = (BinaryExpr.Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(op, e, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // equality_operator ::= EQ 
            {
              BinaryExpr.Op RESULT =null;
		 RESULT = BinaryExpr.Op.EQ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_operator",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // equality_operator ::= NE 
            {
              BinaryExpr.Op RESULT =null;
		 RESULT = BinaryExpr.Op.NE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_operator",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // relational_expression ::= shift_expression 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // relational_expression ::= relational_expression relational_operator shift_expression 
            {
              Expr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinaryExpr.Op op = (BinaryExpr.Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(op, r, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // relational_operator ::= LT 
            {
              BinaryExpr.Op RESULT =null;
		 RESULT = BinaryExpr.Op.LT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // relational_operator ::= GT 
            {
              BinaryExpr.Op RESULT =null;
		 RESULT = BinaryExpr.Op.GT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // relational_operator ::= LE 
            {
              BinaryExpr.Op RESULT =null;
		 RESULT = BinaryExpr.Op.LE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // relational_operator ::= GE 
            {
              BinaryExpr.Op RESULT =null;
		 RESULT = BinaryExpr.Op.GE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // shift_expression ::= additive_expression 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // shift_expression ::= shift_expression shift_operator additive_expression 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinaryExpr.Op op = (BinaryExpr.Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(op, s, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // shift_operator ::= SHL 
            {
              BinaryExpr.Op RESULT =null;
		 RESULT = BinaryExpr.Op.SHL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_operator",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // shift_operator ::= SHR 
            {
              BinaryExpr.Op RESULT =null;
		 RESULT = BinaryExpr.Op.SHR; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_operator",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // additive_expression ::= multiplicative_expression 
            {
              Expr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr m = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // additive_expression ::= additive_expression additive_operator multiplicative_expression 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinaryExpr.Op op = (BinaryExpr.Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr m = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(op, a, m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // additive_operator ::= PLUS 
            {
              BinaryExpr.Op RESULT =null;
		 RESULT = BinaryExpr.Op.PLUS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_operator",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // additive_operator ::= MINUS 
            {
              BinaryExpr.Op RESULT =null;
		 RESULT = BinaryExpr.Op.MINUS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_operator",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // multiplicative_expression ::= cast_expression 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // multiplicative_expression ::= multiplicative_expression multiplicative_operator cast_expression 
            {
              Expr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr m = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinaryExpr.Op op = (BinaryExpr.Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(op, m, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // multiplicative_operator ::= TIMES 
            {
              BinaryExpr.Op RESULT =null;
		 RESULT = BinaryExpr.Op.TIMES; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // multiplicative_operator ::= DIVIDE 
            {
              BinaryExpr.Op RESULT =null;
		 RESULT = BinaryExpr.Op.DIVIDE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // multiplicative_operator ::= MODULE 
            {
              BinaryExpr.Op RESULT =null;
		 RESULT = BinaryExpr.Op.MODULE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cast_expression ::= unary_expression 
            {
              Expr RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // cast_expression ::= LPAREN type_name RPAREN cast_expression 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeName t = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CastExpr(t,c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // type_name ::= type star_list 
            {
              TypeName RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Star s = (Star)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeName(t,s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_name",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // unary_expression ::= postfix_expression 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // unary_expression ::= INC unary_expression 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.Op.INC, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // unary_expression ::= DEC unary_expression 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.Op.DEC, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // unary_expression ::= unary_operator cast_expression 
            {
              Expr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		UnaryExpr.Op op = (UnaryExpr.Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(op, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // unary_expression ::= SIZEOF unary_expression 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.Op.SIZEOF, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // unary_expression ::= SIZEOF LPAREN type_name RPAREN 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeName t = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new UnaryExpr(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // unary_operator ::= BIT_AND 
            {
              UnaryExpr.Op RESULT =null;
		 RESULT = UnaryExpr.Op.BIT_AND; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // unary_operator ::= TIMES 
            {
              UnaryExpr.Op RESULT =null;
		 RESULT = UnaryExpr.Op.STAR; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // unary_operator ::= PLUS 
            {
              UnaryExpr.Op RESULT =null;
		 RESULT = UnaryExpr.Op.POSITIVE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // unary_operator ::= MINUS 
            {
              UnaryExpr.Op RESULT =null;
		 RESULT = UnaryExpr.Op.NEGATIVE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // unary_operator ::= BIT_NOT 
            {
              UnaryExpr.Op RESULT =null;
		 RESULT = UnaryExpr.Op.BIT_NOT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // unary_operator ::= NOT 
            {
              UnaryExpr.Op RESULT =null;
		 RESULT = UnaryExpr.Op.NOT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // postfix_expression ::= primary_expression 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // postfix_expression ::= postfix_expression LMPAREN expression RMPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PostfixExpr(PostfixExpr.Op.MPAREN, i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // postfix_expression ::= postfix_expression LPAREN arguments_or_not RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Arguments i = (Arguments)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PostfixExpr(PostfixExpr.Op.PAREN, i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // postfix_expression ::= postfix_expression DOT ID 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PostfixExpr(PostfixExpr.Op.DOT, i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // postfix_expression ::= postfix_expression PTR ID 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PostfixExpr(PostfixExpr.Op.PTR, i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // postfix_expression ::= postfix_expression INC 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PostfixExpr(PostfixExpr.Op.INC, null, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // postfix_expression ::= postfix_expression DEC 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PostfixExpr(PostfixExpr.Op.DEC, null, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // arguments_or_not ::= 
            {
              Arguments RESULT =null;
		 RESULT = new Arguments(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_or_not",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // arguments_or_not ::= arguments 
            {
              Arguments RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arguments a = (Arguments)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_or_not",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // arguments ::= assignment_expr 
            {
              Arguments RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arguments(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // arguments ::= arguments COMMA assignment_expr 
            {
              Arguments RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Arguments a = (Arguments)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 a.exprs.add(e); RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // primary_expression ::= ID 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimaryExpr(PrimaryExpr.Op.ID, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // primary_expression ::= STRINGCONTENT 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimaryExpr(PrimaryExpr.Op.STRING, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // primary_expression ::= LPAREN expression RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // primary_expression ::= NUM 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimaryExpr(PrimaryExpr.Op.INT, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // primary_expression ::= CHARCONTENT 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimaryExpr(PrimaryExpr.Op.CHAR, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
